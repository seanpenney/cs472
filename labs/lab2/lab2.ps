%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: lab2.dvi
%%CreationDate: Fri Apr 18 13:12:51 2014
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMBX12
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter lab2.dvi -o lab2.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.04.18:1312
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 58 /colon put
dup 69 /E put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE286DFC62
C60C5E1A60E9CAE519532793A3BE22767011A10E7C9DB8862B68141BA0749A3F
4994BB66AE791196BCFE90FA0B4DC1A3E12B7C96F3F8B3FBE788C7AA150C20E3
A54B964C2430A0386F3823E03453092DF0CF8D605072501CB4E9D58092503F95
57AC5D03A66496537A421C20D6C54E7126A9983DDDB3A6FE8D52233D203E4AFB
406EA79937BC887E5E67D9B43376DB6733538F40E5BC8983EA4EA2042EFE1E8B
26E413900A9C8A05A251C0658E14DC31C82290C91F822B3F62C1E3DFA7F04B57
88861FD742B53CC20018146CE2C99156518369FAC4D19006B952DCB5C7DAA93E
62634C5FAF5ED89A29517CD8BFBE075E826FD1CE2DAB10F94E2DF160767C464D
F980577BDFAF5A6D357B9B11B9241ABCA34FE4DC8052A3110B0189CB72A00919
B3AFC029CCD9BB62E462F0A2C898C2B722A26EB0382D3E3D2C0EE5B62B84BD3C
4F9AD117A6203981E3F2FEBC98C4365AFC2988CAC0F23EAFFF0858F9061F1BF3
EBF7DD86A10FCE53A447060F364E7B3451B1B72482BA5F2ABA1200CD9EA91300
EA014C150366498F8CBBD2809628F04051EF5CE3FCB38F5E8D3FE076F8A24B26
74B6F8C9848AA69796D19BB91D1678D39F8D7A3EE3DDC94DF6E8ADB9257EBAF4
50F062250F5496F1AE7AE9E24C42E9C7CD1EAB877B40BA273BB4811F20B49D04
CF4396396C934A726443E0D5356C7FCA55F12195D8F9C39A21D8CDD6A3E5F591
3DDEDDD1C89AD5A7D65CFB560D74F3B9B6F913E0417A33FD5A0738D8BBD60A0C
14695C46319C7F8B8B561F52962A9CFEAE95B5DC85DE3FA6C266C682F6933ACD
293235A5C649FD8984477773D7BF130C2E92DDCB3BA02ED278D08BA499084E8E
78FF5EB3DA9F4103F059ADF429BD0D317108F7A692E54EAEB8B500832C0770DC
D6E733C3EC0417B30E0844A3CB58EF6480CB1EABF0BA0A76863816EC814E4CD3
159F7229E4ED1562C60DD40F53F74F29E1F2916B570B56FFF2D9F18013FC1A1C
6EF00AAC6FF00A956E28823C8F1A29DD711AE892162E66B11499DB64CF9831E2
3B6367DACD56F3834BCC189255AA687FEC874440E8B954E58112CD12AC0DDE9D
50F64A53DA21AB24877F60C3827127C40E66DB0E534C51367AF5A11993BC0C0E
32A003DC855600B7E9D67293FB6982A7D95999BB926B40CE946BCE1D7CC40F79
A4F0984AA3B4667BD14C952FA260BE363DA2CCF4AD1389D3F4707702C381FC8D
277B798D5417119B257E9AB25AB4B458B60BA5D8A5F0738CDF1AE989DEAEEDF0
E29A287AC8C70FB0D415717209EE21603E1111FF004957BA6F304E56340B2577
B638FD71189EDACA5C5029EA135E19A1EE15A0475C62D43A68786698F81955BE
1FD49D8C9FCCCA8B19682DE5685A35AAFCAE0D4C38020D17BEFEAA7FDEBC8D94
50E5719F3AA70E21EA66BAA37E67B2F7C2920278A16982343D0FAB7AE2459BC1
98CF10386E1945CA543FFE031566D87CCC94366D79C3EF9B97194678B135BFE7
EACF64261A252902D30D3DF2CFD0A5E20EB7A6E2149849F7E24D18540EF0344D
1B556A711B1F823A36C7ECE4BF0A4C58545145766DEBC1FB949ED934090BBAA9
47CE3278CB690B6D53A2EA4036BFC7C8469351CF3D616BCF251DEB8E18D57853
AFD65876DF62DF21B6AA38CA7E0AE1059363263A839BD80299E066273F810E0E
5E034EC7EF191DB39B62CE5E8C2056A8BE6E3F04EE99CB833E4FB27A96B2D59A
25177AD4C8FCF4F0071E4DAA32051A177FA2044E0FDBA7D60FD26E01F29FD36F
BD66C27A8A0DC1EBB5FBE61405FCEA28C5AB49A72D28DBD3DC767B4EFC597A24
E60E78885F5A0B532B33DA0A1EA0F0FCD3D699BE373CB2894DD48222B4F98881
43DBC9773651B464A696EB36E8334E042C9C3559B7AEA8895765F80EFC552C7F
AB96F01185505E634D61B5D28AC4D772CB661E1043D2DA20EBE73CB59866F68B
DFE4FED20C42C176EC6099E8D48803ADE872E0006AAF4D9072D7CB31E7C4C400
E4EC2B270A6A0BF0110F7BE530C265D2CD837F39BA491D62C2E8EA858D579378
DB80FA77EFACF1BE6399C5A7A0810FBB7F0D503129B01B56A61973AD7BD80A76
3483CAB5C7D0F901701BFEDDE62B6F59A0FAFA46B20E13827BC354C2E38B1D14
A50324348C8355209D2C45BCF106A6F3BEDBC75BBBC04D702A407CECE41A97C9
A63E4E10987F123F928008622FA2191BC383F13CBBCDDA41B02D65F7D1EF057E
D1FD3AC1F1096E6A349A523091D2555432E641982BB63FE619182D58DE2342F1
DC57BC42C4FAC2547795B98CB361E1E6A86196682A66C0F8A5CBD67C9D4B25E5
DEAC935446935AD9BFDAAF7B6BE89BCD582B7800EE3EE8A6B319CB4ACA31E076
3294C105CDAF4957077D08A0DF25B2CA12FABFA35C23807DB3D73EA5D7584EB7
078BEF56D10790002A41E1D603D720E9A80E68BBA1B455C30938826D816F436E
EC92A838840B614C3763AC1B45A5DDB01AD8F4FB7CAD7C5739C7EC5A0DA7133F
9657AD2CF4D58805567831291641DE86218F02ADCF14580575F0CEC2B8590772
5324B36F4D4F7AC71586C3416704651E46D777F7C0AF93827AC8CEFF1B26871E
197C99DB45C06A7132BD4E4B882672D3301F0D86C29647B10F4E1EB47C5A3EFF
B1C1EB55F6CC212E6BC2EC2BE064F67CC9D2FAB0D910D47E3891510F8B9084A5
8892F3A4B02C0D7D982B7AD1181CB288C606408F31DA3EE112A3C522963FF2F9
662192498573530B0F247681E0676AB1F152F35B422AD26016901CE153A5FBD0
C61DAE2CFB11847AC8C6124A733CA21569FD2264C7292F21D13BB3B79C9F2C2E
247D0EB22FA14922D23D8E1794426315F7702AAA0E4F80FD753B81762CE8D631
4C88133CF6A5A2032CC7F4C29C55567B60F4B85C017F5391A356688D14593F10
396C7034730D5E53F86126D57660415F9E00218F94C201CF27AAEDFEFF56DCFC
2FDD797EB35509EEDA21F048D573A3627603E4F49ED1E3C431F474EFD98596A8
72EAD716196011EE8836F7EFA825CDDE4E0AD2C661E5BB77DF666BE212B278DD
1D1DD6C9393D454552CAEEF8BF742B957A701321D69DCC9031B153DC5962F6B6
8B5221C558B92ED5300068CF6EA185BD01D1C895BB7F65483BF350DF353E4C67
EFF80EB0AD119AAAD093F1EE4A0B38F720C1681A695A4DCA1976A18C70D0B917
B1009E86AB1EB746EFA61676B38C28BFA971B0FBEFB88B7ACBE4D6CCD4D528CD
01AE8E048A7D9F383275F40564AF9A608535A31B43CEAD67F9E73F08751BB7EC
2FC4CFE700E223D63BFCD359A0C37CE6F9EC85B534B713AEDCFC256BCCF5ECB0
7D7F1EAAB01EE2E1F2EBCE0DAF9826E9E34A855598C771B5605200E92A30269D
4F0B059968C5EC0D433A71BB79CD576C0FE3CD34451F919567D9456567419116
1E5060AE9C9FA652FC1C047C86A0C93B9E8692F6C2F7F7992D0C2570BDF9ED03
F2982ED5968069C35266A01CB98504516D51F67CBB78BFE08B5F07271F0CC8D8
F6609D441FA948860C52F676C942AD94D49B845D4FCB45DE69820F906A319D47
83EF3116095F2F41C70AF7FA507AAB1BE3B478665F1F5007A8D34EB4FBC0599D
CF3897A7A3378473728C4FF66C621E0A57CC11673A5BBB7A0CFCE644ECBB1122
46708347F9CAF6832F540690BDED7BDF1B2A719BD897AE2FE1623503B9AD1B3E
23813DC6B2DCC669A82647A39F9A5B3812EDE349C640230DA961811CD4EEEDAB
0ED7A709F57F2416680B13CD0E151728A0CAFAC9FD49D549BE617AF950943357
861CFF0C43E971C3B62D77E26805C50EFE9FB7EFF14699931BCEB497BE77E455
897ACB229E4E7A9CDDBE3737E8DE665260CDFE1E40A3A667287CD56F97E43EA3
F71CD2F27244A241587FE282A8AB4DBDA3A4AED204DE685260D25D3CCC220A6F
D3D6C4CD8E45E87761250F09AC6345D7EFAEF4D697448726C5998DE431C10BF9
D6EE3214F208ED4A041531AB2B96650529C3C5A723E3BF6DEE6FF52CE4D8E771
A93DD524679C399EB183C482FDA723F7ADB782A4DC7264315FEEA67496B7583D
A467867B239333B299FAB35DA0B488AD21AF993D353F4A20C5487174F59345FA
1F59992D04448C4D276F68AE28B0F0708B777CA3DBDB784CAF8BC7F2B86EE600
505A7E93D31D3A5964E4A094183C32B3D9A38CCB3BB287E6EF96127D0496DB57
B375D0947F12074A5A347D65D87CDA647E662642A4E42B16F173B42C3C3F1D9B
D5D1A74952A15AD201498A7CDAD0769F2DB9F5C70EEA7D29E28AC0FE2462D935
F619613B91809193C915CD38F3B6438D5F7D5DDCD458623534151B1F141092D5
33C764BD1E1894900445754025004ABC3EF18F2ADC2A4D64DDA2F463F99C426A
B8320F48A79DD4B011C26D0EA5AD0C3B9470BF1762A4053D5CDBFD388EB3814E
37B8884EC3B48DD6264C59D8D9C342482A69D57B84D25600AF81DB33036140F0
6EF192F5DFD4BBC9B2D3EF3C6559C074292C02437E4E9E37C0A274F547D80826
FA4BB0B53D6F9C11992C809FF1011ED85DF28FCF36E1DE519438C087BA9B77E5
F1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 14 /ffi put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 55 /seven put
dup 56 /eight put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BA8B194E613047BF469C7B4261CACC1DF1648E8A86E926F8702B5ACA
6CEB4E3E85EF23EF5C9C53097F3BF17243B8D4BF0E6B0C5982FD14E4E916D363
E265322DF0823E9990F966A842ED69BADFAC2CD1754FC84C0FF6750D2373F997
362DDA16A0D73B178FB7B67307204AF174AB871C254B8E7CD77058113B702B2C
13F341A972B67756D65C6A9F553C365E20F0BA59F8537C88E0C13F87CEC69C9E
0775F760C4EE10819388782A2CC2E9C000DCBA76E4EFC7B390E50611F3D4F6A9
CE60FC3B742F046E84B4A302F5DB51092CD59F103DEE2910757696C3F131517C
416687E6DF671911BFEFE08D1C5D0B16F9302960E29760EE101C5BDFBA4176A0
260ED46500FF41D25635F195218A804B2651A54079CF48019C52E1B551EEC3CE
13B1FE4864981041B247F3F1908DE376D1F6B44A2572A53617F7D2886B25465A
CE940A258E18D8E4DA592A6F36610CF1C50CFD399BAAA3890E4F95DAA83D88BC
9BF79C0F2F5DAF8BBC9E92F80B744761290E8ED0E49466DEE887E0DC77E6B768
F35E7566E858B2CC4E9DD3BFC7614952F44D84F3D998AA857462568E66314154
8C21182EF44026204A1EC0CB4B5C005ACEB048DD2379BADBCA42CE42FFB59369
7B786ECFEA320CD49838B5DAD1C41E378245A0E017C3352B9CB7F2A1E4AA3D9A
44E4B9BD2243B0EA09E13FEA81CCBC314B2F5D1621D6C290C78791B816AC6041
19029F54CA57404A7DFEE145DF48D0385BD80C15471594F7ECA7E3FBFA7D95BA
E19F65014394D6B32D441C6942B7CEB513FCE083D3D5CAC6C5460620E9AF2B4A
CC18E5ABD7FBC11B0BCA312CC24C7724DC3FE3D09EA24612993121152E7E7B62
E30A2D4E80FFBB0278E40EBC7861869135EB030F253AC25A9BBD85D27C58B918
72F91CEBFCF0E34352FD115235BB419FE06E855F87BE99A803F52D6A6A524BC7
3A9C7540E1B5E69E7FACFCE740832014D11E9CE15249B05E3EFAAB27FC5F1835
ACCD991A8804AE818D6CCEDF6C25912F3ACFE7CCBD414493ABAEB5548FD22922
0F8B49CC808E590F745713B003496E11D35870AB25375233012D4157841CFFE5
65AA78AE8FC20BD76267FAC8D9E2AA0F906E73D4280928CAADC3A9F231043729
6E6142820F3284773474BD6760975F9972A62E14808794BC6287AB03494B9872
7C803CF9307509AB55360772051E6536D71125ED8F8B112A75AB907C4F904E1D
5E6B9BC246FD9A961E9FD64DC2A3FAE09F250D6ED413ABF4B85C04AA42B22BC8
9AD810D6D8B79790AABCA96965936AF48C7C20E49586FE7815A38306DCC28891
250C3B8E70656D0A6E21EE8C6654F34567A73D02A00DAF51B81615252A47A289
0620BF4A98B58FCDAE4433CA3B2857EE07B201C1DD57A77823CA82499F376D15
BFC7CC70F1586F5F10A1FE99EED1A1F44ACE193D9EFD559D1535CE05A6CBD5E1
179DBCF7F8BC2121759915CCC90D54955E4D74A3AAD8D17BD6349883FEBC7D51
762A474D1DC85B16E86B913C486FE626FD8CC4D6DA501CD06332AAD233B8C96F
15BFDC6B246406B31F498C6070808BF03A45536990FED9042A0A6D80A09AA816
6315934AE865722046706D5C33E1B76FA752898BEE15B8D926AD18DDADA0BBE7
7AFAEEC45B5E8C35F080F2E97430ABA915F1CBF5ED207BC5B5DB5282B653D64F
0C43481B16A2B8C875ABCAA39CE7F870301CC43D64A01D0E1DBEF767BB52E5AE
68B283CC0A9EBA78DCB3C907786BAEE3B9701A5F7232A1067DDE130457631E8F
BEE3FC1DDE229B1CB532C66B5022646D7ED0AB804588B218B865D7FB261B3703
9F3168D73FE24CFEC691E6E09494F25E8E612C40BDB884DBE7514B000FE7DBA8
320CDD76B98BE36422421957C0F810683E4AD8198F9A4A86F64889CEE20BE884
34E21D4AE17965AEF948FBA700B1A48AFF1DED59733ECD5AFE90ACFAD485AB57
51074CE74D0B4395DA21499C71454F076D611C1C9CA7FDE4227B562406AECAEF
C07DCF3ADE42B67C81392168E69B6F544156DFC104CCE0BDBF72E670FBF42F4A
F1A55E0E0BDA18CAC3756CB21CFA0EF06F7534E892CEF38EA225571EEC4C1186
1EB5612B363ABDDC588396F953253330B4782574D775A5C7B167EF78296314A4
E8A56128CC39272787DA15AE8A3662B70809468E5F1B71F7CBC08FA3E89678AA
990C67058FBEE716271C40B9F13616657E1FF938C0667C05EC0F6EAF0BE4F117
EF2B814A951B55441C0A0245E0DA99BE44C48FBDB47DDA38C20EBA610EE0977A
C595450050517BC8904427E33CFF9DF0A31242D538649B581A1C1204B025F1E9
95B6B66615DF709F2CE170525C0DF7F51850A0974DB45913BAB5F327893EFE51
C1633BA5422B41314C81965AF5BA59ADFDBD1E5812D0D7C4B32020E5B8BC4846
751131B1F896918158B040035D53A1809917130AFC976EE2AF7B2647718BA103
24868247CF98A2C1A0FFCE1352B779F6058E1661326225DCC4679252FE741B54
E550832039882DCC1EFED9044AFFBEC6A6982A0C58F33AEE26D2B65B694A7592
08C8CBDFD8DEB9A1A6C089C7CF52F2E9488F7A4ADA50AF940F12CD5E779DB2CA
E680851EA08B3DB62B483D8814008DC3648122B81FCABE5E3C40DDA28018F119
C0F499374883A6427317C49BDF0FC5CD16A34140F85CB8E44451520FDCCA08F6
A948A6092DD77592543994102C4AA966ADC92F125940432977C1D0AF662C29FE
A0294C77FEC7F11A7EF2F37491E46416C1C103FA2F9FDE818DAB8E4C38478FDC
A690A0E49C598AB6FED817ACFE170F4BBEAF3B256B3F75010E55367C4D0061D7
CF280148C6424319DBE6543B7DB9BEDECE315CD805F98F3269EFE57B2672FD44
0538D011B810B38AB214FE50D536C96365B6622858FAEB0439E569865BCCBBA4
D01A88FBD9D23D45255A3E232D6D6713CA91A2A09C2F421BADB30DC1A7551029
6882BFE7941308152AEF3E3B54FCD60C3E49BA31201919B8A8F7C6440BD8F589
D183EB0FE7A08B0FDEE2AAD8021298611CF66CF0F7F497C41D1DA5C12F056035
570AED4514D9C4146FF749F6A80EF18801D50D05823276EE42312C476C9453C2
8917B11B8117FA854CE6E0AA6AC17AE744336853F030B51E317BB545FC9E5817
D8EBD841AE591B95F0476714752ABE5E75DEE67A4C36E65A448999AD197DBB23
894B52E279C4096A1B0FC55B36051B18BECAF74A327DDA8D79FF72BDA815CCE8
C0EBAD3ECA434DD7D4B49E2DA7E1A74CA66070E9BBB88DAE394A6F0B5DED6EF3
2BFA1DA308062DE87EDBA104AB19B74FF1F930D5614D31453064C05B3E6B4E09
335139868AFAA00B7289AA012AE43C732C5A43A31D5EEAF750C5E9198C5EBFAD
714C3751EEE6158F5D3C510CF100FA76ECC8115D00596A073738EF22265E58AA
078879695AECB190AF9A424C0586AB3812A612E3D5DBD52D704EB6FEA0D173AC
1FE2CBF2FA186F49F869D90751F09B255B8478B59B80A39FE790090D12FF3C1D
C46C23BD424CB0F1756A11336D4EDC46637971C2C597DF478AFF44C6061215AF
44C5E3E396B5FBEFB0DD4BE84EF6A3A00E247FD5CE150BDEEC348E18D5C45B70
3C1CC5F89E784F83A26526497A21DE0CAFE860C850C675237F26554F092091F3
021EB6371F9B227A9B799A293B6325215D3FCE4D21B4F7EF62EAFA02D18AB7C0
5F78825DEB9DBCAFA9F7FAB2C73AC4EC7ED8BE3AA2DE187E610C2B2C53948611
8C3452605EA4BCEF12162DD149BBD1A781BA84C2D4E6A8070CAFA343C1AE3087
4347B3AC5C8743756DB78154ACFC689598CAC7D40A6B6DE46F120BA2A972695C
94A28875F0AEC43DC72B805DCF733E5FE26A006B9D1258EFA9C2C1B700932559
1D260187F9FB9F40F46C08F75CE93ADE5C17FA5045662452ED1AD10AE16C2BC7
59032D41B3243B6ACDD2BDF93AF12CB6AC7079CF397E365022505278D9B0DCBE
6D435C8256D3FFC33C414476A84BB22AB6E2DFD6E43000B0E87BF93C0ADBB2C4
01146427C18EC9B1D57BC1428EAF7B2F875D06235DEE8E10D1F46FBF8DE6657A
5A15A3E4C1365BC7116C6C00A6480512C0A05C10222C3BE04C6B248A6F8DBE59
C27F2A91B5271CCAADC97C0493E846F5BD27624B76ADDD854154033849DDDB5B
4EABBBA2901758C779946A2874B431D44BECAD25266129B13B39E889410D358C
16DF2BD20B1DF49B109BB11E074BBDE02DA8379C4ED2D1904C762FDC2EE5585E
D94E8B699BD8572426AE517806232DF354EFCB8FC2F6E05267223F238F81340C
459C147E5DF669379ABA5BBC9B46F721E04B89ADA55E5B938B577033776186E5
4B13996A4B11672D72C7BBEA96BCCE97A9136A04D6C4EA48470D15A8B990328F
1E58754BD099893A7AC3EEEC2AC8A0AF78BA99394993AABA272834B747CA5956
D15481478E153FA077AD9438C1FDA5135B7819E62432A23921228C2ED95FB1BD
CB77A52FED453E1B67AA03A2D547192567685F741B2B989D7D9FC9287FEDDC73
44637BE5BB3B5952C7A9696AD18C73F0FDD491CB5401378CDB0EC8F209DB0F22
45D8E77D19D00EE401E3D2F6C0E6FD901567D4D31963B527BE82C916C121F31F
59DD578B197B38CEB08DC1F98490944BA65B536DD13BE7C3D903C1A957D18870
3F22CA45D40A6E86395BD28E7713C4F94E3758506C1F0AB61FDFE3897EA85896
B9F2F2D62AD2C6DB0B5C5757270B43A4219D4B8F921CA2232F0D9BD6D6B60492
885D0847F7EDCF9328B773E5F2EE673D688ABC5830129421CAFD22BAA9F74975
D78FA539CBD2557B87861FCFA2118E9B26662FF535EDF1564EA6CCB26F6A8943
354A472BA27A3BCDCAFB1D09AFA2C9E86ADEC0000DAA1E1464F6781DD83817A7
6A0C2D2856AF96BDC0069514CBC1EA7CA919ED962E5B94C7C3F62A338E05780E
C07DD101989DBA807879414530E05E9C825715834E73D1446E3FE380B1E92650
D6A751D3D9563573C0A037C274D823BFF417736A7771AFD911231FB9208A384B
3C04844A4787B8288B7BAA65DA591FAE489E270898765DF755E2967376794F6C
9BEEAB41C47556AAC991A5AEAA306091148690A35F61B6F51B42C87AB536C148
014E40D7FA6330FAA7400FDD7F1A0CB2AE1A82B348AA034DFE463D82B0EA6B09
AFDB114F601F12AD6A08F916FB5560B64C255FF2EC1D2D9EDEBFC09E2FB39C2B
16CCA9696C1EA53CA179FF0F6D2492AD0915E5BE48EB9EB531F75A2BBF3F568C
671B456E649E425DAE15B00A814E8D17414284ECF4853F53D5FF918814DAEE3E
80DB65B2E290B67B743D51438CFFB2EDF9319D3B2C542C61396ED5C80AE9437E
34F04A4D0CD86B8BA0BAB71A8F6054AD5F29FA9581FE1979C52DDB738D6B9F6D
5D0A72D046DF6723263BA253B4AA7E5A24D0D9F2D47426A055F8411720A76365
CBD5E130849E3879498F798309DC163A50DCE12C39463A0B032E7921D83A34A4
EC689192C9313182C72AD129D083C8ECB617D906ACBF83AB6F2E166DC0D80374
1D9C146342547BAF59D6234B5C63BDC580DE795F2EC4A043DE99693D5E56D25A
7CB02716AA241475C000AB81A91DBE203E4F5AC407F1B078E72C9995142DB28C
906AE86BBD9129FD0123961D10966EFB32D3C95E5D21D15E6DA3F5D938A88AC8
E669D0F038AA4A6670FF0882DBECED189B0F709554A64DB9853913DA202A36BC
D4C632E1242B9B5A046348854360C9BA26E2947340A20DF830227ADF20B38CEE
5AA7D41D3F8FCDB7EB381BFDB0CDF9EC56CD1CDE613574DEF61B0860C23ACC96
460805C1C2EE831A6EEBA261E0C17A3FB04AC74F463BA242CA3EA92D3BA61B77
4398EF4E80E2F4E0FA9C5B1F449CF30C071F99013D8BF9641BF51372CFDCEFB6
E7D013A02D6DFF8A5842AA27602E3B483F57FBC223EA68003A0D2BC928423DF9
CF5F97187CAFFC7C410DABF113B599CD28EB7184F74D5D11EA96EA44EB051520
E5CDA001C9882581FCEFE1633D4997D45A412E05858B551D609AEBCD7EEE2BD1
57CACDCBE57A990E6820CCEA4A2484B4796D0EEB7CC4DA25A1AA78435FC97F6E
82C1FEEF83503785101480A00E72F5782B38B4E4107347760246EBB9A04F3535
F0E399FA5B9DC98A2A00325FFE5F6C41817D7C29A0B96096565289C77DCA0316
EA9EB52EE6C37C11C1F502CD82C051862007EC50ECA9CF2F29A77DD5B24C2B45
6A435124777B631FB6B4E693CF90E8D09AA6D763F784A823996EBE4F7FC7FDD5
CC2A4844D7AB676B9C78F459E4D4A2042DFF0B3B1D4D4EA09E9A6FAFE5D42230
B4AD8F89217729D4C7905CEAE5C3A93A75FF3FA8270F110BD83132928649ED06
B31285D3B38737CD483FD6B664ABF5FA67154E39C742E23BAEA9D95CBA453A22
8F65C0D4874F6548485DAD96FC1577C4A34D2305D9CD2564E6336A44B9A1EE72
B10DA0F2412CF3AEAF525B5ADDF082797FD87EE3AC7E5D014BB9BE6CE4ADCE6D
F24D92F04058F461B04A090846113FD47ED6683BA6DD8F47DC66F336DAB11363
1E643CB3A58ABDE1378FBF479AC6057105DC106B5C77AAB51C9AC7C67D726568
B1290CC83DDC02FAEFAE01195B1993CD84BBA6A876A735A7B8B8D146DF849FC4
695DEF33A162E9B51B22C9496EAA90332536EA60BBB69214BFB32B8D94C0AE92
16A939C2BD2BA31689A02D47DFC80D4CE0E1D4BA5234B0AB14CBC658B9F0F84C
3A18BD08817A8E3E5EC0CD66E58CD400399DAECABD380990D600337917E64789
C623FC7683D5B49036D07E25E7F690E6A6344C6DD3CE7C726B5B495C1E5B5233
6A03A3E7A082EF18EDB2AD5B5CEEBEBF31AD8337C9817B76C6B748D5762A3BA7
225A6606C36EB3CF94B32FB445C90495EE844A0C98F3930BBCBED328FFC3BA56
594299480D9791D96FD3A13BD6CEE82E5B623F90D38E4470D425FFFAF45B23A0
73C025AC6257933B0A47A97ECEE4A8E6F1B2739F205B578621F3F3526CFA34EF
1FF21DA654F10DFB00CB6B4F9EDDB6375B3775F4875721AA14863E7AEC00E007
04E0748A18B15B0AAACA33CCC839D26F4ACBD277007F56CC87B83E14085D6F89
F0B7DC5609AD9E620646E0697B3554C875B73FBFD8A21A3E16725DE962C4E245
CB85BC8D4EE0442F6F996481351784CABBA90E20C0187ED4AD83C95110CD76F3
16E6644A5F559CE257FB8FE2B2826B719AAF611781AD6A5B810687CF610F311E
940DA25189B54FEA7BE4FC66620A8F5FDABC48226F4DCF37257E34AD99B150E7
932C7A8BD8FC40657589A5B29132F6C1693DE62E75EFBCE3A7D7504352F6626D
A05AFF7F3F09FACF1A7CA1E87683E588770EE74BBE833A40CAD2973883B210C5
FBB66E0923E563773ED4EA225D9E452FF56C8EA15D168320066CA251858D83C9
2C193EFB94C4440754336C03D687AB28EBFA977E98DB0D07689CE7F687CAC1A5
6873567147CEA996AB4C1518B6A71F02765BF32DECDA53BBB54DDE4DF3D68077
BEA7CE6CF6246437CE9A3E3F1A894780E1DFCC4F375052AC4F5C19AE47A98F4A
9F0FAA0F5A2A0A6A085B5598918AE71048FB262CDCFBD8E50ADE7453BB145909
6C655B3024BF5C7564ECA1B92F12194C53681C0E9C9FB0A27581FADD62EB7EAA
F596940D221EC7A8CE5F6DCA66C9674736D68FE3BFB52D1BB183C0EA6806D820
10E8B4E424BC67AEFF5A44BBBFE7102FFE910E466A112AC1F6CBEAC53D9D6038
537A504D7E786C99B21885B3BCD27C1053B30E02107AA80F1C3253C4187EA81A
1BDFB8460AF0BB8B3F5CC04F6E758D4DF8424CE4088583DF612EBA7D8034714A
DBFBF4F386DFC93E76F18BD36E85577DCFE05F61C1728F341AF23A2A851837DF
7E9E2B7426CB2384DDD4418DC5A7D9A73C21B88AC128EF544CFB21F019E435BD
8E491DB89DFB4A30BB4224E67F89FEC8AC503923C03A2722AF91A7762FAC7793
F7BDA5806A0093197C3F18B027B88BF3399512C967F1D5C428E0FE13A31A25F1
635D2F22A379A9C7022065FA155D4E3D2A21409234DB549BDBF183BE9185F149
9555D380EDB0DAE6B0E89ADE66E6E49C67DB076057A5E5668DF1B556EA68E55F
8C9BF63D77727C8318869731C3776591084F444C30131D48095D5D7ADBAD409C
BAFEA3BE4C633C91AEB6B3D24C31B02151C52864FB9BBBE70AB2CB19499A948C
777781CB539373D0098C2673187173942F18D43324E488F6B23494BF5CE000D5
51735A0136CBB61DBD8209B416CACDE4C4C11528D5422AE7BD70BC48ABE57981
CA3E6710EF55C4A1685EF827E45DE9FE59E414F13134A2AF202894068955D3C2
6BFF7A60A1A375FC16A3B40469AC70927740C9159FA82264F68E130625E73C42
67613C935F5295D505A06C442144F53CB2ABF8C58EE022A2F0A911D02E34E67B
D1481C74FE8EB4F853A7536D408CDD1E6265F8370486FC4BA560DFC8903A4618
93F408634287A3C19839DD1FE5941415D6F6A9078E448BC95B424FB959AE5C59
3F95A11061FE9DF7053916BAF48B32A86CC10E5E16177001A0A982F30A4F4EC9
5C5D1321B43832747BE5CCBF31D66A61B709E6DCA9F8E3714033E2109EBAF305
193DD4F8651A9A9B5F17343D840B62B36781D07971088DCFBF2F7EC1B8C2DBEF
FDAB6A3091FBBA265D81A7B30C1ACE826FDB2884A4B39B84B4D2763D74874F92
5137516B2DAB4E9C1F600E2446DB5AE62DA6FEAC26FA725065BC34B1E4C25CB9
E6A3BACA9A5EC7C1D2C8F81ECBCE1C79A79A23D95073AB086C4C6504F9C696D9
05A25DC8756AEA89FCF7B22EAF2E889E52F384F95AFC7447C8E7B6BA9CC59B8B
AC22469DE274838C7306E4DCC0FA9699EA224F8D2E97A764A8EDC21D02121F0F
40B57B2E36F427DDCF3391833678D402D14D108509DA0B3BCBA6ED3082450C42
3E50DB8D2FF5F1F0A79F01936D8073975F8D5454F7730C6F016D744C4414A985
320354926F25EC82412BB552C6A2755993BAC1925DB3198403F8770600AD22F9
ECAFC9BF44D6708BA178E011D435ECB414C741559B7DC18AD85B18896EED7E56
47AFAD47A091A0134A277DF539F4BB1ED2966BCFEC8D9D33F8950F19F7D9E53B
CF5953790702483E2EDD0B9375881728312EEBC074B4C1772E7C676038BBEE76
5F4EED8831DAF8E1A41C6643C23440DD4837A425FCAE4A5D3203B428DD68E404
5A64C721990F4DC6590AF55C89EFE236646B7E1F5DFC9827BE5E6FD42EC94FF7
87B000E048EC9AB84443DE44A7DB9DE7DBE060F224885E16888AFC467644DEC6
B861200586B28435365445F87F925850309F6E95595A414F5DF98D83F3095986
504340700DC544B336247F14823A15467929F65A9D8A4F583542A4DD499F057C
2A8FDA4BF1E9D598706A6E0224064374D3366399B0A90432865E78370D5A606D
03D7954CC3F65A54C34B4C2C5C295B108A424CDD39BAB0A0F60B8FFB1CCA4387
D10324EA1659AB559B72277E7B33DEAB95BEDBD18098AA55ADCA9381BF3C3BC8
E377F8875AB6FAA4BC6E7C937BBE261186D62BFC6C3E5956052D03868C9CA6A7
858DF82BA844F80CD330BA1A62420CF1A289CE95D89BE9081A6B5C5CFF687402
0A52BAE08E85224D3AF3953FA549CC480EA1AB7FE47109AAC5F81CE71C3BACFF
DDCE10F43C20DD5593D8B872720568FBE2307AD81B3921A753756415035B1E6B
C2228BB3F770348329012A6F81ED7D00DA00A3AA6C27205507F8198C8AA16E49
65F49752B563DDFC1A02D5C24038292C7E7490A1770DC9579BC4C9A9E2AEC008
A1FA163C27526A42D19DF5505FEBB9E7301DBA7245F94252216FB83494EF4B8F
BD0AFDBDA2B7FB05B394EB5A2364FDE4893181425D956D25FA5B9C1B8A290B4F
2E532324D8FB2F0A70D82DEC79546EC04D163A23DF615F8D470479AB556CDA95
6133F8BED1499AB835C79124DC6493340CED77380065A182C0DB01D7F2113566
6DA7BE6BE224B539EB66C16D8AE8A79E0C49871DC2FC2F7201FE0FFE8E453DC9
52C767FC6FFBD971A97F6F17CCA061E1C21576D168C8E5E30CE2FCFBEBA7FDCA
667C2AC85188FB2D1053FC6DB3EC4F4E55462F943DC16589F358C3FCB7105F75
F3675C4C25F4F01C110D526BA0BAB5682EFC0A5B9B49166A987C0BA6DB4FF875
78FFB8BACBD636926E6DDECEBD1E240D106DBEBAA7095FCDD484621874801276
A2752BCDD17030C5AD8BEA817332E39F4E654B12913E707782792FC53458EEDF
E443EDA5BB4933DBDF7D4052350F30EC60844A6CA7D69515F506A3079C0B855F
9988F9C6C786B17698FC17F17F68DA43E8F6778C4FDE4E7669223BD95FE7FB22
E5B52CDC0604491C65D990067209027BD73FD0F8D5F7CE65B0DB38EE89AE555A
EE8DF49BE57E5DA56EBFE3E3202DADB07418FB836B24017035895B610D2A56D7
9EFB04DEEE56F9372BC68804636104997C44FA3C0610EF1906853EB5078FEAF7
B09E6E438D1257779CE6EC4715C39EC21CBB26587AC86ECC04E644F59C75148B
C2036758AA4AF1502F80C62C97F458FDCD3E0A3364DADFD3DCB172FC6307CF55
70D94740D3F03978697E530FEB879DEA641E3B0AAF0B4CB15C6B028AC758702D
D167A373A136FA94A11FB08329AACBA3FBBE231AE307EB74BDC5ED628FB8879F
50DDA7BD642A376201B179A7D0AD7359D2BEE1D97B3939995156AD79941CF91B
47426205E070A9857137C7A661CE5BA3C8F22E86028C19A9DBCF7473DF2EFF41
561A99D4FB58E99D72BEF26B1DC72D2A27C4019B26A2646A9B8D86AB61876C37
61B0AFE1F60AB394A4C71CB31601AF19875D11E93EC8319D331A4EAA9F620522
664A552950ED8D27CAF038A5FE83C572E81AA670F4D5C0897B561E5F363EAC6E
996CAB5A94932C82E3E032904A068804309438C6F75055B2F06BAD339EB54979
4544B48F914A59E757FB5139934C307658E06EDF60838832BABF3526C2DE09EA
E132456656A24A253BD78FF48A6BE3A32404A65E3D6299376DEA9A8D5E6839A4
8786483567DBCE995B623347438F62CB3A9F6292CC65F4C043417B28FAF625AA
7115502A6D1DA0387B4CC3DCF1285530F7A67B8D371FCDCDD00B10CD954EC079
85AAAE48D4CB1A62B4A634DEA31974F1C687F9923D895D2D0D1BC79F70A4F631
6BB36B1B0539C02F4B488F68D0721E8FAEE739CA778B7B8F3553889253CDE1AF
697794BE610808F5CDC63772A3C26BEF8C49C7AB0E827E48176C87370F151F69
E91B3DA247D720D917E87C821F0A9879F758B41A4F77A1BEFBF84328AD48BCF8
938830051DD30F8A241C0151A3B34F5E45201DA8F787C1211D97DD6461E13EB3
A3C3B8408D26E709C8EBDA9E0523847008921A91E877B2479B97060E6CE43836
F91FF8A2E876E01BE205C3C0F0B00DC083DB303770BC4FD78C78D07E5E17F6E4
0BCE73BC0F48FF2BAC24F0C36593C82BF2CD14ADFE5AEBA0A57BB58114DD860B
3D1A1F42F5257A9487EFF996EAADB7F5DCA504978EF64B8FCFDCFA4BB45383B2
41E63C4B16C45F91CD518902C1FBC6F01BBE8BA287A103A955A76223B14E549C
17702F152D8A52EA3AEAC748CC96D3FE5836170D6A82DA903BADBB714D4E3C08
1F5484ED5A055D20A9101C4BE5C065C14702BE427F252DD13B0FB7EF50FD6315
1C5DB9CBC3914DDC63A3AD92884F4894E63BCB91972CFC5EF3E176450988CBA1
D6ABF435ABC9DC3A811E55ED16336AF7AA64D2695F3C8B4F6DC39A3C91206E17
1BE3A5B14CB1A755811ECF8CCDD6987542E281C982B61B5AFBC1032938ED122C
3708F053E8D87E0CF042C9FEDB88CDF980962922DB5ADA3D50E725A35EBA6818
FB0E218CCAF0A6B3019B0BB5879AA9169533299F5A567954E561D470061A349D
22454550E2DCF383FF51DE66CDCB340799589E8FAC2C45EC627D5F65E18E4CBE
4222DF0AC744ED8D5CE7E56EB3DC2F421847E7431ED844696DAA90213BAD49E7
BB44F6CD54AA67FDF0FA87DEF6920E33E06DBF99A756FC837D4FEB8285DEE6D3
A0CCC531D5F3A90BCEE043B853E2BFA6DD14F6E0792D32A158C9C6C8BA8F21C6
025E16E0C89D4A95F23F5300739B91BD2515595EF692B198F1EB8A285768B89A
702AD6F5BE6B713F4471C564DD42A6DAD84A5713EA216E4922A61597232F8D6E
DE5926B3BEBFF14C129D4371DD473E4B4B389C1BCFA71438684A0858803D97C9
9B50B32C42DB9E318FC4D299B4FC1BEDE7DA6FEA5A2E8D3E96ECFC6778783E9D
5820F88C2A67F5C1DEFF9CAB34E9E3DB6DD5ED0F192AB657788B6E219B757A09
7821F61848EA5512EA00DC4D4F4F0D5EE6D537571B58CB877770643429B34396
4EAD3F1B0CDF76583817C06D54A2340C3B5B740C6527D0B465A32DE4D1DDDF38
DFEED7C408681D83C39954D64781336F52436D45BD26FB9115A67CA7D9A026A7
E25E1744990D0EF0474EA718078EC76C7E47DBA0896C6FA3321A9C149D6F5729
CBE4ABB3B6AEA9EF8314B751E32FD5EE50456409252B1DDBE34A6C4BE1334721
B1CA76A9C74C6FF3F24737D9CEF96B5202BEA4692D7FD7F479A24FF01A4E6E80
B413B73B1640C642BABFD7A25D3A79AED270FB5EF4444AC09AE3D873863B77B4
07C7CC5BE095845C8EB167A7C1D40FDAA1406A4F72B749D8FE6694CF6708A594
63FCD567925736B722C47B7482195184FFD962881301224B7FE5EFE051B72B11
05691E7F04D2ABFB62E3FF594B55123008DD00D3E9103F1380CD4361EBAD234F
03057C5F1DF84CB67755F2C9B45BCC82B2DA4B9BB2746D15350587098646CEA7
DDB1F72027DE0A92EB46F80A106C51E739EC0C873BDACD6F28649139BA5BFCD2
076351AB327F372B224437C9B8F1A39F2A84D4DE0EB8B9C0915C669F85018209
99E35F39A0D52DA21AB80B42CDD53094FC2C35282EC685634894EEF9B66A5AE7
A77EF768E22A95CA7C6577AC0DAB85CB0B97BDF0666690C355E3DF1C7905FE2A
463BFFA2F49A9BF183A68680754F1B4A492F9BA8FC7B70A84270ECE20281DDB9
238E978427BBFB5ECE0189B3231056A068220C03371290EC6040D7575930A8CB
38475A645214BC0042EB874DE3522106428B6353F6871ECB9934D78CE176082E
A258B1FBCE035E5C63A0A46D8AB77636261674CA3C919F7CAA9FCC49D5C8E1CD
17F560474D3B7A58AB8A6DCE8E45FEE8CC76A7BB4029D80317D14BA8F55D50EF
9BEA2F11534544A7B779AD61F6ED97F582FEAF74FCBF8D186153A376760BB1A0
A3E58066C733365507A60EF8ED67FEE97B04F48D1A89633E46ADBFE5C17A256C
62A209C52520AA78C1B2E7F77FEA240887CD18A9809D713DE5D7783F1A4995E4
3A82FCE6D977ECD55C7F35B79EA09B8EC333267CB0E8D215DB3152A33312C4C0
A6CD88E07557A1DF7ECCB2F640691AA99CE05517C3D2913DD5E85589A158D0D3
EC091488CD21394CE4C5926D5699B1E52D01DBCE0D88C13A3D3D236876F663EF
873660C17CFDA1EE4530E32C84319B431FE5A01B2DB61F8018BACF0BC344EB21
887F82B571309AC76BAC24042BF1B8A3358C67448FAADD4FB83B393E2E8B131B
8EDE13F0F9098A73B15459B5D67DE5ECC7206D7E9EC0EF3C95B30DFA00339C36
81823425E8E11A92327E8020730C9E679E4EE20EB09F484FABFC47DFF484729B
AE7ADF3B1CF78F7F77F1A63ECA56C981CDE4165F4438A245E094223EABC373EC
00B69986DBBDCA4F02FE808A52D5A1997E470372ABFD2885E6F30618D0CFAE3D
433C7843FBB979A5271854B7B784FA2D1170CE8447DF46C0DDB56E1D71484892
D54B27C090A8871AEDD3FCA4F97AAAD0F2ACDA5C73F2E1614911374194C3DB9C
0D0A49F1DC5DE52AF7075CD8336304E809F0B2CBFDF9864A5C716872EBA8BFD5
7808CA484AF3A8041587C61E82FBA0D0AA657E7E550A8D0725716FBEBE43443B
3AACE3756E78B883A526A35A53311BBF42A5BED3FB46CA8FA6DF3E4F95C9C0C9
D144B43B29E9A510BA0E60E49C499A8927413BBBE5E1CE66B1730496443BA84D
CDBF91CB9E950A0EFFAD6BB9BC26D944344FA8DEECCB6DF3C769B39EB9BB71A7
BC684F072CAC3031DAC3AF8F0417BD930189FB4632C8EA45DBA87221F63B6731
9745017C46E6CBD14439C85AC99CAA34D30ADC4E0F0575CE47199E9EA086F0FF
01E6A99F9A2070A27E081BD31157
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (lab2.dvi)
@start /Fa 135[71 2[75 52 1[55 1[75 67 75 112 37 2[37
2[41 61 1[60 75 65 13[75 2[92 10[88 10[37 4[67 2[67 67
49[{}22 119.552 /CMBX12 rf /Fb 133[37 44 44 60 44 46
32 33 33 1[46 42 46 69 23 44 1[23 46 42 25 37 46 37 46
42 6[51 62 1[85 1[62 60 46 2[57 65 62 1[52 2[30 62 1[54
2[60 59 62 8[42 42 2[42 42 42 42 42 1[23 1[23 2[32 32
23 4[42 19[69 1[46 12[{}55 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 472: Lab 2) /Subject (CS 472: Lab 2) /Creator (LaTeX with hyperref package) /Author (Sean Penney and Paul Atkinson) /Keywords (cs472 ``computer architecture'' clements ``chapter 2'') /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 -328 a
SDict begin H.S end
 0 -328 a 0 TeXcolorgray 0 TeXcolorgray
0 -328 a
SDict begin H.R end
 0 -328 a 0 -328 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 0 -328 a 0 TeXcolorgray Black
0 TeXcolorgray 0 -120 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 0 -120 a 0 -120 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 0 -120 a 0
-120 a
SDict begin H.S end
 0 -120 a 0 -120 a
SDict begin 12 H.A end
 0 -120 a 0 -120 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 0 -120 a 2730
-37 a Fb(Sean)28 b(P)n(enney)e(and)i(P)n(aul)e(A)n(tkinson)3385
63 y(April)i(18,)f(2014)3405 162 y(CS)h(472)e(Lab)h(2)208
470 y Fa(P)l(art)45 b(1:)61 b(Problem)45 b(Set)g(5)0
552 y
SDict begin H.S end
 0 552 a 0 552 a
SDict begin 12 H.A end
 0 552 a 0 552 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.1) cvn H.B /DEST pdfmark end
 0 552 a 0 TeXcolorgray
60 652 a Fb(\(1\))p 0 TeXcolorgray 42 w(Y)-7 b(es,)29
b(w)n(e)g(got)f(the)i(exp)r(ected)f(answ)n(er.)40 b(FindZ.asm)29
b(con)n(tains)f(the)i(source)e(co)r(de)h(for)f(this)i(problem.)41
b(All)29 b(v)-5 b(ariables)208 751 y(are)26 b(initialized)i(to)f(2.)p
0 TeXcolorgray 60 918 a(\(2\))p 0 TeXcolorgray 42 w(FindZ)p
433 918 25 4 v 30 w(2.asm)f(con)n(tains)h(the)h(source)e(co)r(de)i(for)
f(this)h(problem.)p 0 TeXcolorgray 60 1084 a(\(3\))p
0 TeXcolorgray 42 w(On)e(line)h(10,)f(w)n(e)h(c)n(hanged)f(the)h
(register)e(from)i(r1)f(to)g(r7.)36 b(In)27 b(the)g(debugger,)f(w)n(e)h
(could)f(catc)n(h)h(this)g(error)e(b)n(y)h(going)208
1183 y(through)g(the)i(register)f(names)g(and)g(v)-5
b(alues.)208 1491 y Fa(P)l(art)45 b(2:)61 b(Examination)46
b(of)f(compiler)h(output)0 1596 y
SDict begin H.S end
 0 1596 a 0 1596 a
SDict begin 12 H.A end
 0
1596 a 0 1596 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.2) cvn H.B /DEST pdfmark end
 0 1596 a 208 1706 a Fb(Using)25 b(the)h(pro)n(vided)f
(translator,)f(w)n(e)h(translated)g(our)g(written)h(C)g(co)r(de)f(in)n
(to)h(assem)n(bly)e(with)i(b)r(oth)g(optimization)208
1806 y(lev)n(els)k(0)i(and)f(2.)49 b(W)-7 b(e)32 b(then)g(compared)e
(the)i(translated)f(C)h(co)r(de)f(with)h(our)f(o)n(wn)g(written)h
(assem)n(bly)-7 b(.)48 b(The)32 b(basic)208 1905 y(idea)25
b(b)r(ehind)h(b)r(oth)g(co)r(des)e(are)h(v)n(ery)f(similar.)35
b(They)25 b(b)r(oth)h(go)f(through)f(the)i(arra)n(y)d(and)i(c)n(hec)n
(k)g(the)g(n)n(th)h(digit)f(from)208 2005 y(the)j(righ)n(t)f(against)g
(the)i(n)n(th)f(digit)h(on)e(the)i(left.)39 b(Ho)n(w)n(ev)n(er,)26
b(since)i(the)h(translation)e(is)h(straigh)n(t)f(from)h(the)g(C)g(co)r
(de,)208 2105 y(it)g(is)g(a)f(few)h(lines)g(longer)e(and)i(do)r(es)g
(some)f(op)r(erations)f(that)i(aren't)g(actually)f(necessary)-7
b(.)36 b(So)27 b(the)i(assem)n(bly)d(co)r(de)208 2204
y(that)j(w)n(e)g(wrote)f(is)h(more)f(e\016cien)n(t.)42
b(Bet)n(w)n(een)28 b(b)r(oth)i(of)f(the)h(optimization)e(lev)n(els,)h
(O0)f(is)h(m)n(uc)n(h)g(bigger)f(then)i(O2.)208 2304
y(O2)i(lo)r(oks)g(v)n(ery)h(close)f(to)h(the)h(same)f(as)g(the)g(co)r
(de)g(w)n(e)g(wrote.)54 b(O0,)34 b(ho)n(w)n(ev)n(er,)f(clearly)f
(de\014nes)h(ev)n(erything)f(and)208 2403 y(tak)n(es)27
b(no)h(shortcuts.)37 b(Not)29 b(only)e(that,)i(but)g(it)f(actually)g
(displa)n(ys)f(the)i(text,)f("Y)-7 b(es,)28 b(it)h(is)f(a)f(P)n
(alindrome")f(or)i("No,)208 2503 y(it)g(is)f(not)h(a)f(P)n(alindrome".)
p 0 TeXcolorgray 1929 5529 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
