%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: lab4.dvi
%%CreationDate: Tue May 13 16:31:55 2014
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR12
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter lab4.dvi -o lab4.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.05.13:1631
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMR12
%!PS-AdobeFont-1.1: CMR12 1.0
%%CreationDate: 1991 Aug 20 16:38:05
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 14 /ffi put
dup 39 /quoteright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-34 -251 988 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA04C77322EB2E6A79D73DC194E
59C120A2DABB9BF72E2CF256DD6EB54EECBA588101ABD933B57CE8A3A0D16B28
51D7494F73096DF53BDC66BBF896B587DF9643317D5F610CD9088F9849126F23
DDE030F7B277DD99055C8B119CAE9C99158AC4E150CDFC2C66ED92EBB4CC092A
AA078CE16247A1335AD332DAA950D20395A7384C33FF72EAA31A5B89766E635F
45C4C068AD7EE867398F0381B07CB94D29FF097D59FF9961D195A948E3D87C31
821E9295A56D21875B41988F7A16A1587050C3C71B4E4355BB37F255D6B237CE
96F25467F70FA19E0F85785FF49068949CCC79F2F8AE57D5F79BB9C5CF5EED5D
9857B9967D9B96CDCF73D5D65FF75AFABB66734018BAE264597220C89FD17379
26764A9302D078B4EB0E29178C878FD61007EEA2DDB119AE88C57ECFEF4B71E4
140A34951DDC3568A84CC92371A789021A103A1A347050FDA6ECF7903F67D213
1D0C7C474A9053866E9C88E65E6932BA87A73686EAB0019389F84D159809C498
1E7A30ED942EB211B00DBFF5BCC720F4E276C3339B31B6EABBB078430E6A09BB
377D3061A20B1EB98796B8607EECBC699445EAA866C38E03ED7D4F3EDBCA1926
2AF6A41F67AFCFBF3630C943FA111E4CCD988A7363F7C2B75EAF5830B049460E
0D2B337988F150B9182E989E7750C51BA83DF37685483F86D1F47478883F3F6A
4B7F768DA5AA89E8F163029ADD4A9209DE8A4F285766C06EA859639B92CCCDCA
F59B1C2BB8D588CA754D1257BFF76B53984DF4937093AAEF79009D32A29A4C16
FB610C7D6713482C48D7F9E8410C0F00AD6E67021056B6035534E79F05D14EF2
4E800C775E85D08E60E58EBA770E78075DC17096B35A04B307C19084A9C73599
448559616575B00FAEB1400958865144E05956FA8F558BABB3CF3BFDB7F3A4FD
894AC62A7ABACFDB24C395AB623D829557A1A35BB295EE6C64591A4C462931ED
2F85FEF90501B50F6999E7ACA4E45C4A3002E706F58605598955B6F81EE5D02C
36C6B3DD507E0FE274DBD24DF0AEFC41FE44614DB81DE6A76E17577AA1381C08
672B60994F7F31B6A315842D0F30688D9672B908F000D88D7132D83F507A3742
359300C8A9ED153A7DCB66749135BABBEB703B027EB728D70052EB6C57028088
75C168678436359C60C46D117E6DDE0C4EE156150B0B5A28C20ECD5B9E170DD6
DE97AFE974F7BD40387A17D3142D1824D66B8F6E63C3ACC31F2AF99D82D0CAB4
A13D6984F85CF8D67F87522F4B0A193FD2FA412C73D7D878DB8E38D992E8608E
F715CB297144243DD3C530E71ECD7C1BFF5BED1373E47F3E65D0A9EF3FEA7918
77A0051EED2B9288160DEBD9ECE3C1F5712F3FEA8EAB630CAA46916482048911
8C78F8559DFBE577B695BB4B25EAA2881DA6F5B850FA207B5A0862278121BA77
750DCCD987A82B8A4FF3AFF77EBB51C76043E1ABB6251FFE67D5218B65D5B900
55DB66B994E8FC51DCEC00A38F6A1AE21FF38BE39EA56537AB2DDD851302D0C1
E8DB74BFDCDB147995ADEC22C09AE466645FC37FA8DC4622193659B661DA7393
1463F5FB69DDCD5F1C54048634072B63C9F6559B5E327400197DAD48387E78E7
63588E8DEA566581D62790BC29DEB1D6D8396EC1399A7F44D4D227BF64461C53
B365689AD4EEA70656255F49F5FCA5E41FFC64E654DD9D2B8F6624F8511A8729
F7DE53E373AB124010D8E7505326AC9E962998D344C7BC00B213BA022D991E48
030F362C4221C3C5A7B89DD8D5D71340330AB2EA27BEEF686F200F7E8B0F2C0C
9C767DCDECAAFA2B3B026418DD6FC6F4314C8883F4AB2957C030DD7ABFF916C4
D72509C8DCAE34E676941D099CB98FAFC1C141BB069AF93BE2BB9509D635E436
1211E1D5EEA8ECB56411C76AD0DA11B94F4CDC93D6AA0F4695895C6C0B1BEBB6
942F11E7C2862B1D0601C68E06DD8EC60FE6CC243E6825C1C75D681E6BC0D5D0
8462FAE34EEB933F443D1882D5E9876C7F4C47D7E218681A26D125611DE32E28
E4DA1DC35BA9D7D26BD358C6C82E1BC237CB25174C638076BC143B3B18F77EE9
493CB144BE66E2338C70F12550E0A4C9BC3CA467684037E59543859E5D45E2A5
7C814709F0235B7543C363B1E656052D658D0ADB5715454D1B4B27413F888F94
A302851B8EED1877AAAE825CDC1B629AF9628351B923C74FE850A0EC7233ECED
0C4DF9BA11CE842D40008AACC8C90E15AFF9D0E4FFA8276113E01DC106BF7161
C50EC906EC512E1E4978EBAB56F5A3DAF77E8C48252889DE48F2BFE6CAA1BC07
D70AB94EB3B85BA2071C32BCF4B4DB356A4771438B66BBA994EF792928A9641C
E0CE892B5DE31C19EDDEC2D9DB68AAEDFA186A87AC17B3E0A6CDC6DF14A32DCD
823B74E015B718DBDE70B2771F12073E479ECD43B7F523A16E785B827ADE77AF
3C930FF6FFEA57674CD0AF7D6A3A83C6412F7D056E590ABEB4F2E367AE75F0D6
490AADD678CC642523C9B383F6B67D78E410D364BBE6D8E27949D947FBB6FD45
06D850002906A71D5BC55842F0980900A76E485BC6716AE72E57EE40185542B9
E92B8435514F8D7CD228517EA715A93C68A6114E00A77E9E1E4DCF8EA8C4EB6F
0D358E40C8D5194C9EE8B1EB0A5E1759532769CF9262914E77BBB78B6F15E041
A67832CE7EC913B0E9EC6382978285EE1C1BC9405F30366D07522F70B2B1D23D
D7CED2F7AF98AAA056587BA7B4F503E7E49827785765255CF56ED83F3D4B3A1B
61560C6A0E28A6C2C91575C9AB122C63AB2B6BD887FBF2C55DD321DEC6BB8C1C
874AE34BA2C242426AEB9364FA6CA6469C1F73211A5CB3E8F0C86EC6727F9104
1B42631F12724E91451C1B4DFCB5F89B49DBFDDDFD199D9502FCA7D53C8B5496
4837EA4D5929E0D3410055176E13C088A70BEC0BD9DC1F6D85AE755782ACF95A
DBB6E2721620F9833E5A70AADCF53377211FA7E1DAEB4CE7AE8C9F7B18A69CD1
8A5A586867392936AA42DA6048A7D63A9667DECDDBAF4BDE32B674C3D5C53C9F
36F3EAAB4C1D20A88E5624E0DFD58981C22830140EFDA6DAC86F626136B6BD68
A7DDF531D17F302FC571DC74DD5DB39B0BD4B93A6899DC5E1C42C49EB9B6468B
1A8FFE4440BAC39B9E1C8214640A5657CD86901F91CD87923A1A2B489CC79F62
77EB18A5D82244424F9CE4562093E2A5B5651D8EA5F4CE56A03FA9D028C07918
D7D1A19F444FA6407573F49586DB0310C6546495C6F9463959DFC7AC37C8C43E
DC0A0824A32E4959F935C9F68CAE565156150ADC2DEDC1158EBD27EC44306367
40AA091D03EBBAE8C8127CED24A087B0F8F29E9534CB2B726C103435BC98CEE7
A2F46756BB084D9A61A78864E8009723F50F51396C337567E4F9E2D30CFDDDA4
85003F213203585986426AC7BB1B076FBDA5FD1C5EB3AFF4BCB5B54FF7CEC4D6
6A594BDD0C72DA1E3E9746D6B7F35603554CFD6C597B61C93A6FC0B60BA4C8E9
0BBE1371AEDEFD769ED55DD0BABE775732320B13124E603B6BD5A02F82249CB5
4A055E7AE412B90273FD6DB664A68A8660359A6A1C65B9D5FE5AFC2649E5048E
73BFE1CD0F89DD69EFB3E8C8FDDED89A4D3514689192196E69BAD9A483B36CC6
F87850654BFCAD756444B87BB562D60901D43AA62C7F88E770AC88192B11C939
E5090BCA735DA7D50B6E7C706A5F3A8F680D677E532B71AAF11C737E82E3F8F6
4A8CEC15E550F645960496A6D6EA355FC1560E0EDCA68A0C34F7AFBB67084928
5015E30D9FD7ABE512DD5D022F975E04B71689686A8C7DFB4F4760FC5D9F6488
F8EED8ABCE3DE86AA4A2F83B97248697F9CEE60BD416BCD84E2C23C2673C4474
52CC2E5F3D7B128A6DEAA7F461F3C7005FCA41CEEEC8CD6375F51E421FAFBC66
C6F555958588506DFB61A19E5D94E2409EB2E85EC2F0E0438E569A4806E2E305
7974A9AD5BE353C8548A3418E82E2938D50FD2BC2A90BD2170E0E412306D3D4C
BDFCD63C842C457CD0BC6C9424FAB0EE4CFC0A83E5E464F078D5CA3B8AA4B0D8
7CA2395AA54CB5F31F01049D6C9FC94C35F216B4E7C691C308D5DAE77A2EBB7E
1411F9D5964E169C1FD32DAF2F80A07EDCC7A991D9C8755E29AE532E5394B3EE
36421E5BCEE8B7E9EF9403689434D6B15C9AA22ECDB130CF3575336DBD7B940F
763BD68CDA3D6A724085777FEB12EDE2CCB57252C0D2FE34DBC6DFB853A65D18
232946CF9B62CE55B1AC961F62E267E8D31E84FF58BE8ED20626CDF176C1CC92
C73905E2CDAFCAB2ABDB9DC5E7C129789282769B2175E16D62717F8756773AC2
151EEEE6FEB2452D8E6DB20038BACBAD8D37EF56D86B3B2BED23E2DEB32E6C2E
F583384CB0D41BDA74A7400329345C0D29932908095E34C06E90F1C212B00377
E94BCD8C0F42BBAACF70238E31A9385BB18862B352E90213AE7D789C4259E5D4
5978A148DA2A0F1B4E1B11C6F4D96A730439532C39E8D05134EBBEFB53AEBF7B
71C31402A7F1832602DC359501FB2C0F02A45D08A5D4B27FBA1E96393DFF7B53
904A68329232E4BF3BEDA657200A8AAFBC0E0D2689E9804831DC329568DFB983
F05D545973C2D5CB0E649E9B653D2DEF780FC0D69FC776C1F2D1DE4CF09069B7
1F9E52BE95D7C3BBBB2B7D8AD0DD9C1152A0503760B262050969F3078EAAFCF4
838F417EEE0F14666F74E302D6D71DDB3D09266936F799BD60FEB314D4CB4FAE
15C7C434AC8B93DDDF51D41D36F51C5D0E5820E5695AA6B6DD4B0E705C904542
9F2AAB0C5E53F00606AAF2B590BC02F03F5CDC1DDF1459AD6FDF0F1BB7A03BAF
2CED7F1A867552067A520181ADC6D9AAB9657C71B777052459A14D29CD7AB275
70E12A1EF9E5C25E88E0C86A293ADE81B466633002F63A1376EEE21721E44B46
F480CFDFC027B593FC7FD6A44B0563D68D7284C6A7BBA8E1995A3F2ECCDAA24F
1E84918033382A58F15F8749E87F2ABC4BA183588E8846F7AF2956AE08C54EB5
8D2D1F2167CCED074A4EB1247F5BB61F2735B98261D95E303802239E70834810
00C3008DBB4CF40C0BB4941BF785B130930FFF6B1016DB859450047F1CBE5F5A
D9EED41D49C23C92C3B6E5CA0ACA93006D51A94827C388D3D3429F644746CF58
45C6CA7DDBA686B6A65C5A0CF64060146769E3A24882087BE475A42001C4680E
AED88C33DB768702A140372C33F9EA8807FBF542E54941BF62E73F75153D62E7
7F9062B6387A826A143AA104818BD35FA3F7761F07D76D6CE51C9D17A7619965
B5BC6ACCD686384FD2BC06AC945201A44BE75768E84984C81151C7E8352C9891
0462F92310686318B330E17F91C48BEF29DF359537A10E51CFA6A61378D7AB64
6D3801F43744DE3C73384AE5A51625170F3F9D838ED4E2DDBD1AD77FD0A03CF0
EE2736DA007A2D8D5B07CAE8BB65D1F3138CE0888C95C6B03E0DDEC8BE3C54E3
9E5918ACA78AB5D2F8B51D487B000BEADC82D6262EEB2E3850DE1F12FB5FD773
61E6025F8DDFCD9F34325D35BD193CB264D3F7E5F10968D5F77D80BE2FF46437
C07CFFA78105ED4F37F988F1B21C17E5F5D7DDCBA821B0B3B941F10D27C2AC4C
A0D17B9DEC72966DEFCB481786F615EC2CCC4DCB9D759CF05C5AD05BED85B670
2ED75719D33BBB5A57ED5A2B85B9182D998D0215B58CB7CCE20CA2ED7579358E
EE88438E9FA4477A43D54D4023D9C7ADBB78AA664E9E9DB56FB1256693B8645D
D0C7B5E008B401FFBC9CA8B83512A78B6B3BF87186990ABF2E1444E0BDFA4E34
B16B61DBBFDFE5E8FCB2C500FA050A1BE784E5C4D1372D05103E740CD33A033F
1C08221B1CAC6DC301A9CFF752D6F70E16245636E48A84E5F5EFE6DB0ADADF70
B9F85B4704E250692BF7BAC92B3831C56E13BB89F0E0DEE8EBCE8ADCFC2AC7C9
816EACA568502141C9EE294BB64DD49EEA1B503B1646EFAFF9C2407B9C95B975
8A30D9B791E605D7E70007C80BDF77CFEE2029FD59F0E8D780D0E7A9B80BA1D1
279F16F2104F06D32D7E65ADF493F523C827762E9870FE69375E31EAAC03D591
58B2CED34D9704BFFDDFCEF20CDE187A78B1A859D5369747A8939210EA6DD359
721A553345C2561793DAE12F4C6757C254508F12127F8E397B9351E3FBC59187
B763738FACC6BA81AACFF1CAEE3ED2FCF203FFD25C08F6678EC431BDC3718A86
0000E3AEDA78628C63ED9D6EC853125A76A6B648DDF080A820428CD941AF50BC
37D58902411DA5F75B2ECFF22603899DB10ABDA8958CDE36E9A02130AD3B4167
02B6C11EFF024453B31FC3730F0FF49ED7DE172DF53E0899C5189B5FBCC3C0FB
07078D0F5046AB7C6D3F1E9B416AA6FA627500AA083832CBB892C59BE0E6B799
8D81B38258C28D3FD39FBA42489399B83FD8F5BC3F1078B1DB382D5B3ED98556
F605A4395186C6CEDEA4EE91F0180C18F4EDEB9698BC2C6C40E1A770CF13EAB6
386C69B1C1A97D0EF43EB9DB0EC88831D9C9D45B3C3229C63092F8C06E9862D8
8EF504B3A73AF9ED40DF35FDB72C70FC0298F06D3EF7A15321C52B1FB92FFA6C
6E87E48EA7353905B2D923C588CCD4255030A79BA4341BA57D0A4CAE022A01E9
636536E13768A710BAF4E5E47F5681AD5A4A087B09B5A94ACFE2BB16A278F027
5DF89A82A5C862CF258B6BA490707F8E26BC414ED90E1FA8092E1D1BAA19BE9E
7521313B52FA80CE8A5C940119B2AB2C002534969A9627AE37346A542F932293
120810AAA2C68B2B63987BB5CC2B3EDD29BF89B35C2EF32AD56B68A3F2A760F4
300F4521B4B13AA4864C24AA34B5A4AE29199C6491E068DBE31EF25F3BCC0887
C610E03873E8354F28963ADEE581FA8EDBD83B902579DA54948EA01E9C633600
5ECBD44172581D05CE12B3E35A300A2F1BD1FE311FE18828D42ADD9815BA9FD1
4F738F3C31C6F702D2F60BCDDE8A6DC7F114A634EB4C911C1B2BC922CD633743
5D5AB5E834B04C2BECE709306A4CA7365B93882DE3C3C3CD4C44AD1B01EF96D4
02E87D5265F0C2925C24633A401029328029AB60EE3887614904318A84F4049A
BEC8888F3F86ABBC10BB76D2EAC175A9BED4C79DB4DC296FA744FC99BCEE2071
50E64E9CD72A3A3DEDCF42BC1E34503254584CE7F2333ABE0695F3953597D0EB
097562FA24FA816692BAD1AA4FDB04E0D4182533112F6CB2F5B2EE647F342D41
91A27F1AFE40BA51367167B4158EC6FC328202B6E7944F4BC54177C1D73ABFEB
5995F5CB6F4E19148EED57F04AFB7A7A13AD24BC3F9C9905E65F6467240FA5D2
F7B2275A2503B72BEE396CB6B63EEA3567CB043FFE99403BA1856683CD60F992
D9D62DDC54087D84E19470BD8F48CEC9AB2C6108FC77617E715189E75153616B
F2732350E5EE0064F9C25C28CC81A52B8ECD6EB04EB0BEDDFABBCE0B2C782299
0E40EFA5457F567056977D9D3D94CB840A7B945C05F02DC327E0FA8B69F5FB26
2E1CB39D78EB9CC9A5D3CAAFD278E9AA8A20825019AED642E3BBFC35103E3AD3
4C2AE07025DC82E13865B4E47B695D41D67D91EFAD6D34010C37C58D07AD0179
DE7EA8AB8257017ADEB023F736DA1DB94554FBA8E4487A354D415BFA4C1E9CEC
1E3204CB9E0B3CB128ED1F8D0098B10943DE59EA7DA6BE5AAAB47FAFAABA62B6
62B8DDF0EDE7B214A4533D79DE612627909B3ACD44D8B404651366676BF0D700
9E4A5C2BF7AE50CA3FB9EA6A83B8C118E99FC3C6CB69108CA36A6B3FD487C333
47647DDED5628750E5025D94B510218905E230ECC168AE06C555830169208AD0
DC4AFF24316751760595CFB8A1D72FE1DF07230C1504D9D411E413696C88A055
3808B809857516AB2F4B472C58694830EE00493AA859EFA10DC46A259BF10EAB
1AE752A64CD4FBEBEFB7DC9D306EDC5A72808E6D4BB56B52B809F5803E81E5A8
6CA048742FC0F39F72F81337A21445B5AB7166396BAC152B4D49C7D863B12205
0B490D1340DAEF950C0E0897B416F2B28E1BC56AC3A1BC34D0676148507CA51F
A376AA43A6FED0F555ADB2237783B37913FA4CC4BC6EAEA3B9C82CB5B70F1677
E4168FD23ABA69C7967D93CB440D2455A20AA06DE2691DBE154A283B2B97F6B0
A25DBD6239FCC6462C4D2B7DF9ABF4CEC2D52F2C3798B22A3EBB075271346216
A5AB3ED98A9E4B7F521AC2DCEFC65AFBBF0D49986FAEFD5AEA59DD8DA2A4FD63
7A691C081492B3AE12075DE7047D429E60449E4291A808516B3045B1120F660A
1B82280E363049FC0B581B13842328F470D8CF1D94B81731F928729D854C684C
2759BE0079A5D4581B5B2C9BFA6725F1C40AA60063D231E22EE2ED8B8B2E2623
34D219E5A991BDEC5F574C9D30241FA7C520385ACC1408A83CB01658C38D1ECB
788B3DB143BA2F880A674F22BFA1A95BCC8777C9807790A9DE484C719A3D3189
8DD405E04C31576428FFDFADBDDFD45C89A7237A3FF303E4E5676C8892B9CB46
A1134DEEA8ECE26CD2E08FFEA034F5B5B671B667F3AFBE43E47F3A03D729DC2C
EBEFCA6BDD4F7A0529F72C6CE6998664AD3136CA465507A5A0DBF4BE3555970D
D68795B2F0BDDA26D5F060BFBABD7D3CA4D012C45C06B6E6A09AD4C6854DFBF0
44B4451FEB3A6CCFAFDE76D297E14055A59EC4441845D5D72B7516838B8EAABB
836DC74C599B0F278085EB767794B5753939E7B0486ED3E05FF47D43F53E84BE
C13B1B248CB7FA8F4651D72BF15BDD6DD595C6BDF6548E0153B9E8E21EB5E7D5
1055646154C37347F62F3DDF3FECC6EA09CF476EAF1C56EB256F6C37F3068F38
F5375CCEA1494982CAF941BFB61F4D21159598FCE286F098F891E85CA6103AB4
3D76EB86F525AB6200A2B1B53DA9D0610A00860038C96CBBFCE4E2CA44B441C1
7F176F7DFE4648A928EC82E1FBF93BE2C11E4B2C6B5EBC8AFEFC5A05FC371BC5
E240AD805E6A412F594C877FBEB1EDCF0F273E76301C2132736B992F0266CC2D
F4291EBE01DD94606956B51F1FE9D9A85AE8B2A1D6F2B4EC98EDD4EA1449112D
330332C9B46D34959EB663772DD395AC58FF1E6E492DFD7C61CF0A94B55FB736
C8139BF6E71390B86B3A06B8A2CE9B1D85309121F0F91BBA138FDDD861684542
8460AC47B514CBFD94375949E53ECD1CD0F93745BE0481F19C2AA3DC764F426D
C8117A6077EF1268510D16E2666DCF8B456094F66DB12A2E1B101037157C4958
9FBDFD0B8E8DB1D5619D5100C4692320C56967DFA73E941E2FC1FCD5FF4F91C2
7BE63EAC1052C2F381CC717B1FAAE35F5F54AC068A62E2DD35C7350E85267D4E
4E8E590414EA094F0BB06926FDDAAFED1783425999F4FE18CB3F48BA8FF5C66F
249F300D538830E274D76E8AB47FED186F805D11027F6066CF03CCCBD2D53505
D585518473E8A9EF40A7EC5DB7AC9E4B8E0F24D8FDFCCAEA4B5F22B08BB4C088
6932C80D0017DBBAB65B79AB79CE5EA1451D6696A4E78A3ED15C47932AA1E013
27C3D89DEC95E335AB3C83AF01847A6E9809BCD9C6373951C551171E77C718BE
A316269C96836EC5AB4614CBCE53CB3F89C7A8BEECBBCCE56DE11E54EF9B2C03
6C2B367B2A6F126269044007F2BEA01588B87E095BB6D4E2D338995FABE80C4E
E7C48231E0228A90AE2861CDA84E486DF287D5A9F5DD080E0BB7FB7295D19BD6
1DA666A68A07B449FD6D92A9EB282A46E675433627778494FDF2FCDC0E2F1995
13B016DBC773E7C39A475E4215EBA6B3D6BBBCD58BB08253E52980DB44EB7783
2AC6D3F82584211A3CEA109BE5633FFAAD66BD8AAC0006FD606152CB77499BE6
C183F073038510275FFC892392D096EF1B5E80A611C3BB8532D8BE9872532D41
EFB4F29F8730DC440A53DA4BA543D6BD98967E69F291B02F12B0B8CFD14A13E3
2C97BC504F2EBEA8553C0A4A7CFEFC6E3C725E2344551538491497217D582D5E
E7E345DCB19259F7B6585003C96744942622E46C5F41645063ED9AE6E94E7F4A
32FF8A6D8920BAF24D0160FD9667771CBCE1AD477B7168D8692F60D84F103FE3
BCFAF229769F871332205F6EE0F58FAAE274457DF16E761E3D104FA306CFD5E7
7E61B2112B744F781091344734464699C631C58203E5227AAA67F1ABC5904DA4
5E25AAD88AEACBDE1655AC2FD5F7EBBA43E9B9C1294AFE910AED9B4153BD7908
ADD853AA883234C80C74CF12990C66566FF62A64F3A4F248C5C2F4D19C3E7C72
824398872B63D575CE3E5F4CA317C32F6D50D8A7B43D484AEC67F11FA49530AB
64C90D14D95DD3B6D1DA447C827BCE3AB3CA44D05055F46F177B31DFD2988A9F
0AB73BC215FCD8AF5DAAA91B65007D924E9F65EA6497D09E8E254C13FC1440AB
14E42824B64B184C874CE39A59C752DBEE96F8635FB95D818F29C54C2BCE3075
1A5FEFFF8B0C26AFB7A25BDF567343717EA21C7C24ABD11F65E23665F95A6198
1987422231E9E5C5DA37356CDA484A11A43E856EF1E2E78AE7E2EEE2C7BF47F9
FA271F39901875CBB9A31506346AC6EE9C4B818C2C58A4C276332B394C09CFF5
FDA9335BD7070D6609FBEA3D079A7D1738B0A313B26CD862F38CFCD3E20B803A
C73C66DB6BE66646BE19EB12FD50427FD46D6080D6C8A681D06CDCED947832E4
8EDD4098425162CFC7FD25C7DA667E82376926A360CC60D9DA7C7A03B0A1D12B
C51B84A77F17E2244542BF863AA0F4A573D55C0971E0A31F5DFF2327ACFC6AAF
7F663FE965B0BBD55BBB3CB0A262C984FD0838CAADA72CF18310E382AC6D9465
E38586119E7135FE3719312FF68D60C63BC2361FDBEC24CB16803816C8B2D81F
412FBEE15190F5FCB0D41EFB9E2692EE3EF14E351BB3182FE604BF3126679473
3F45F5EAC443D421EBB93FEAC754F80ABE1571B70F7A8FFE2ACAE07CDF100ABC
6304D42C33162C583A44EB133F2C5E307D5E58163450BBA54E15000CD12BD3A6
B538421AB1EBDD09285F3A1155FEC1A5E83DD09BC2ED8FC2153293EE3F9AE366
D990113CE9CF94A87B76D7156516294B03C6C1D511D7BD024EA5B129A25F44A5
E3105EC95002FBE94C1DF17CFEBDC635C64142CCA6906F2BB4098B79F2C4E7C5
273FFF1253AA800D99180C1E4C647E7F68D80ED5DCFE0730983442B994189D2D
621EA8419C292919327ECC440C109F107E366240D99BA7758E259EC8A505715F
0BCD4430544A2740F835D8F5C767C1628F3BE681757ADC0D1F25F9912D835781
73C4C05B705F5B875CDF01DF4F9B9F667D99F3B70971C4DC93BC6532DF8B9850
DCF26A367C67E403E0AB3AB39A1405B17573C46049D7B1F440CD22A7239392ED
8C9880E46EE2BFD543BA22B8DA28CBDD77C9E2D9D7CC4E6ACBD5DF3E46C09B2A
2ACF356942837825BE76B800DECC66006EC13A88EAAB20A011F36FED5B34ECAD
652E6D3BFA4AB21394F9EC752E7945135B80864AFED97941A7DEB470F12EC29E
047E252BE1D0E835535C55ADD98CF1588D5661F5BA5EDA97F3C2B6300E0E8288
ACDC2AD4B8E1F9861A5B0D1D20921AED1C37BDC5D971E7C5A6CB2D5633732CC7
AD3784036CCA007BA98EEC8BC4D4DB2FE6C3229F04835E95F348CD16DA3077DD
8C979D4801DF8F1B627C754215F631505448B6E79083BFF4C498291A425717C8
BF01F76FAFC2BC808C01CDB23E7BD7AEC898831B51114D2052CE380051216B20
D067DAE83F085319DD0750295B347A0A7E457CC6FDCAFBA79DD8A362E5B41B0D
83E861E5ED5B2942080CC255CD20AAC204DD33CB05DD91B0D23C7A6223A46CEC
7FE85DB3622DB280DCEB529D0A2092FF83D894AD33C6C374EED853EF996C34C3
8461A403823BCD5D08DCA70F48699878F2B816BCA1A9B52D9EA876D51BA45580
9FDD73FA8BCF756FAD85ACBFC99A89531875766B98A02972F6A7812D0297E317
1C8F7EA8703430B824450FFF7A230C4E2FF114D89DEF11705F4A0C7F1EC0DF6F
14F210B6C23F69F284CBE200E4E6E42B75BD7D9FEF9F9199493EA35A9708A180
F9A76719C89FD41124D216792C6DFDEE5DA52C10FAED324DCC8237568EDEEF6F
3A09411A053C87763EFCBE9656641958657F55B3AF8B9464929B1F1E60DF8F78
BD8AF5B7875134B0093597E34E9D13D05A1D3EB3681B7AC8941EA5F4C81F1C60
55DD98ACC4509B06A375AB962F70F75467B699663B56D8211D9D350CEBFFE1B4
C57FED416DD3D8B52227D1FDB832CEA7C52BBA358B0BC261A04554548A2940D5
83468F98636777E7510CEF0C6B1F6483F386FD9469684682398A0B737736CDCD
93BE6783A7CEC7ADD389DA2EDFEBA025DA8A128190BF92A6474C6EE07B3B3F23
D8337C3189C822B51EC2B88F5F2BC9CF334EF0CFCBD2E314BEFB6D7941BA4872
0DC7C0E4E9888FE71AE52786260B291865F65BFEC51806E31305521CE96136A0
24F337AB82B734548C234802DDFBB0B5877C560B7B5F914908441A6697FB7743
E8749A543BA2F9787BE488883ADF22F3905D58F402DF8CD8002D820D6123C033
36BF0B24F7E9BB4CBC300158F1A67F34FC766438D2A3B8E14BA7A93F2B6336AD
0A32892CD0E56D32969EC1CF5388736C969C17A66808AD8EA93C9B0C711041D5
2A53EB75A7C8E7FC9C73C12BDD3FAC80602EAA6EDD5F45E9C12B7C89ECC9EF04
ACFC0CDB845157D6186956E0F77FB0961FE0D886C4D4DE564552C6FB3F80DB3A
001814E76E282F3304E14BC1121248E319465C1624C0B8BFAA1FBB64FBEDD880
0DFAFDC9309096E08DB955B607CD15D4CA91DF1F874EE27BDCD34DAD94389B9E
5A6E3F141AD224921F69B52DA5F1D1825955BAD3FB7B2B245E6D7CDC4B67A595
9AC01B07D974ED816315401E79A8E3C0BF17E56785F0D3658424D2E06A41FDD7
B790973C28F0141C7AF023C0B6199D617AFDB1CE3CF71611A0B9E8B56AFEBA00
281415807F769D3392C7875974ED8B122A894CCA188B072CBA678302D9354DAD
F83D1A0CA80A58BCA07048B6DFF047910B092714A514F02639D93CC17B558052
9269D77E483EC002319F3C7C94C23BE3C71769153BA4C3C54F0DAD6AA9F4F89E
0D61598B4CBF91F7D775D0C6A56B9F926CF11080B581A41E5455D0422E27D136
B57EC421F5C811CFACFAE30F1BEE3268078093628922E23480DF0CBD5B140F65
481C4F425FA20DEDE63E95D5BE0B6BC6E845DFBCA0E91022865B544CD06D7B1D
4AD9781B3C1818FA3CDA367453AEB7C93278230596F2EE955BFEF42D49
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (lab4.dvi)
@start /Fa 133[52 62 4[46 1[46 1[65 59 65 98 3[33 3[52
3[59 17[91 1[107 77[{}13 119.552 /CMR12 rf /Fb 133[43
51 51 70 51 54 38 38 38 51 54 49 54 81 27 51 1[27 54
49 30 43 54 43 54 49 9[100 1[73 70 54 72 1[66 2[89 61
2[35 73 4[70 1[73 6[27 2[49 1[49 49 49 49 49 49 1[27
33 27 4[27 24[81 54 54 12[{}52 99.6264 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 472: Lab 5) /Subject (CS 472: Lab 5) /Creator (LaTeX with hyperref package) /Author (Sean Penney and Paul Atkinson) /Keywords (cs472 ``computer architecture'' clements ``chapter 9'') /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 -328 a
SDict begin H.S end
 0 -328 a 0 TeXcolorgray 0 TeXcolorgray
0 -328 a
SDict begin H.R end
 0 -328 a 0 -328 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 0 -328 a 0 TeXcolorgray Black
0 TeXcolorgray 0 -120 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 0 -120 a 0 -120 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 0 -120 a 0
-120 a
SDict begin H.S end
 0 -120 a 0 -120 a
SDict begin 14.5 H.A end
 0 -120 a 0 -120 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 0 -120 a 2526
-20 a Fb(Sean)33 b(P)m(enney)h(and)f(P)m(aul)g(A)m(tkinson)3328
100 y(Ma)m(y)h(13,)e(2014)3319 220 y(CS)h(472)f(Lab)g(5)1381
341 y Fa(Memory)38 b(Optimization)146 461 y Fb(The)45
b(memory)g(op)s(eration)f(pap)s(er)g(talks)g(ab)s(out)g(practices)h(to)
f(impro)m(v)m(e)h(memory)g(optimization,)0 582 y(b)s(oth)32
b(in)h(general)g(and)g(in)g(more)g(sp)s(eci\014c)h(cercumstances.)146
822 y(The)41 b(pap)s(er)f(starts)g(with)g(wh)m(y)h(memory)g
(optimization)f(is)g(actually)h(necessary)-8 b(.)67 b(It)39
b(is)i(necessary)0 943 y(b)s(ecause)31 b(memory)h(tec)m(hnology)f(is)g
(progressing)g(at)e(a)h(v)m(ery)i(slo)m(w)f(pace)g(when)g(compared)g
(to)f(ho)m(w)g(m)m(uc)m(h)0 1063 y(CPUs)39 b(are)e(getting)h(b)s
(etter.)58 b(Th)m(us,)41 b(memory)d(optimization)g(is)g(needed)h(so)f
(our)f(applications)i(aren't)0 1183 y(b)s(ottlenec)m(k)m(ed)j(b)m(y)f
(the)f(memory)h(rather)e(then)i(the)f(pro)s(cessor.)66
b(Moreo)m(v)m(er,)43 b(there)d(are)g(a)f(lot)h(of)f(easy)0
1304 y(practices)34 b(y)m(ou)f(can)g(dev)m(elop)h(that)f(subtely)h
(help)f(the)g(run)g(time)g(of)f(applications.)146 1545
y(There)39 b(are)e(three)h(main)f(w)m(a)m(ys)i(of)d(optimizing)i(co)s
(de:)53 b(rearranging,)38 b(reducing)g(and)f(reusing.)58
b(Re-)0 1665 y(arranging)36 b(is)i(when)g(y)m(ou)g(ha)m(v)m(e)g(v)-5
b(ariables)38 b(that)f(are)g(accessed)i(at)e(the)g(same)h(time,)h(y)m
(ou)f(should)g(ha)m(v)m(e)0 1785 y(the)c(v)-5 b(ariables)34
b(declared)h(next)g(to)e(eac)m(h)h(other.)47 b(Reducing)35
b(is)f(reducing)g(the)g(amoun)m(t)g(of)f(co)s(de)h(to)g(run,)0
1906 y(whic)m(h)j(ob)m(viously)g(mak)m(es)f(it)g(more)f(e\016cen)m(t.)
53 b(Ho)m(w)m(ev)m(er,)38 b(sometimes)g(something)e(that)f(lo)s(oks)g
(lik)m(e)i(less)0 2026 y(co)s(de)e(in)g(C)g(is)g(actually)h(more)f
(lines)g(of)g(mac)m(hine)h(co)s(de,)g(so)e(it)h(do)s(esn't)g(actually)h
(sa)m(v)m(e)g(time.)51 b(In)35 b(these)0 2147 y(curcumstances,)42
b(y)m(ou)c(w)m(an)m(t)g(to)f(compile)i(the)f(co)s(de)g(and)f(then)h
(analyze)h(it)e(to)g(see)i(if)e(there)i(are)e(some)0
2267 y(w)m(a)m(ys)k(of)f(shorting)g(the)g(amoun)m(t)g(of)f(co)s(de)h
(that)g(needs)h(to)e(b)s(e)h(run.)66 b(The)40 b(\014nal)g(R)g(is)g
(reusing,)i(whic)m(h)0 2387 y(means)31 b(reusing)g(as)f(m)m(uc)m(h)i
(co)s(de)e(as)g(p)s(ossible)h(so)g(the)f(program)g(do)s(esn't)g(ha)m(v)
m(e)i(to)d(load)h(in)g(more)g(then)h(it)0 2508 y(has)24
b(to.)40 b(This)24 b(usually)g(means)g(making)g(functions)g(if)f(y)m
(ou)h(ha)m(v)m(e)g(to)f(do)g(the)h(same)g(thing)f(more)g(then)h(once.)
146 2748 y(There)39 b(are)f(also)f(three)h(main)g(w)m(a)m(ys)h(of)e
(screwing)i(up)f(the)g(cac)m(he:)55 b(compulsory)39 b(misses,)i
(capacit)m(y)0 2869 y(misses)30 b(and)d(con\015ict)h(misses.)44
b(Compulsory)29 b(misses)h(are)d(the)h(\014rst)g(miss)g(that)g(happ)s
(ens)g(when)h(the)e(data)0 2989 y(is)40 b(read)h(for)e(the)h(\014rst)h
(time.)66 b(While)41 b(these)g(are)f(inevitible,)j(it)d(is)h(go)s(o)s
(d)d(practice)j(to)f(a)m(v)m(oid)h(these)g(as)0 3110
y(p)s(ossible.)47 b(Capacit)m(y)34 b(misses)h(don't)f(happ)s(en)f
(quite)h(as)g(m)m(uc)m(h)g(an)m(ymore,)h(but)e(it)g(is)h(when)g(the)g
(cac)m(he)g(is)0 3230 y(to)s(o)i(small)i(to)f(hold)h(all)f(the)h(activ)
m(e)g(data)f(y)m(ou)h(w)m(an)m(t)g(to)f(hold.)58 b(Sometimes)39
b(y)m(ou)f(can)f(hit)h(capacit)m(y)g(if)0 3350 y(y)m(ou)i(are)f
(accessing)j(to)s(o)c(m)m(uc)m(h)j(data)e(in)m(b)s(et)m(w)m(een)j
(successiv)m(e)i(uses.)65 b(Con\015ict)40 b(misses)i(happ)s(en)e(when)0
3471 y(y)m(ou)33 b(ha)m(v)m(e)h(t)m(w)m(o)f(things)h(that)e(are)h(mapp)
s(ed)g(to)f(the)h(same)g(line)h(in)f(cac)m(he.)146 3711
y(Soft)m(w)m(are)25 b(prefetc)m(hing)h(and)e(preloading)g(can)h(also)f
(help)h(sp)s(eed)g(up)g(memory)g(op)s(erations.)41 b(Ho)m(w)m(ev)m(er,)
0 3832 y(if)c(y)m(ou)g(fetc)m(h)h(to)s(o)e(early)-8 b(,)38
b(the)f(data)g(can)g(tak)m(e)g(up)g(unnecessary)j(space)e(or)e(ma)m(y)i
(b)s(e)f(evicted)h(from)f(the)0 3952 y(memory)g(b)s(efore)g(it)f(is)h
(ev)m(er)g(actually)g(used.)56 b(If)36 b(the)h(memory)h(is)e(fetc)m
(hed)i(to)s(o)e(late,)h(then)g(ev)m(erything)0 4073 y(will)d(b)s(e)f(b)
s(ottlenec)m(k)m(ed)i(b)m(y)f(it)f(loading.)44 b(Preloading)33
b(is)h(sort)f(of)f(the)h(same)h(as)f(prefetc)m(hing,)i(ho)m(w)m(ev)m
(er)g(it)0 4193 y(isn't)f(sure)g(what)f(is)h(going)f(to)f(b)s(e)i
(needed)g(so)g(it)f(guesses.)47 b(Sometimes)35 b(it)e(guesses)i(wrong)e
(and)h(it)f(ends)0 4313 y(up)i(w)m(asting)g(time)g(loading)f(in)h(the)f
(correct)h(thing,)g(but)g(o)m(v)m(erall)g(it)f(usually)i(sa)m(v)m(es)g
(more)f(time)g(then)g(it)0 4434 y(loses.)p 0 TeXcolorgray
1926 5529 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
