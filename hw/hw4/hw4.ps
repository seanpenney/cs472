%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: hw4.dvi
%%CreationDate: Sun Apr 27 19:38:08 2014
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMMI10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter hw4.dvi -o hw4.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.04.27:1938
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
9560176676ABB71BBD0EE56B4CC492C0652750227CEC6CBEEE374709231B00CD
0DE83AFDE295B314F6C8B1FFD32251C1925D96A64D739FF1DA4926460B28B3DE
E949AA0BA3DDB16534FBA30C32092D5F712B5E8C8D5142F35AF2906E6C219D2C
7FD9A368C193E0EB9C7E25FF03C546B6ED993F964CEDB1B8537C617170787F37
88D6F2AD02384B01067FE3F98257BAB958BB3BCD1001090A4502DA0638080EC6
DB784CC8AC37CDC01B29BC481D6A05ADC6188785262358C1BF1D694BBF31C1F1
AF117C1ACED44AAC6EB4B9A2511A6762DDE8FCCBA5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 35 /numbersign put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 59 /semicolon put
dup 60 /exclamdown put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 89 /Y put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BA8B194E613047BF469C7B4261CACC1DF1648E8A86E926F8702B5ACA
6CEB4E3E85EF23EF5C9C53097F3BF17243B8D4BF0E6B0C5982FD14E4E916D363
E265322DF0823E9990F966A842ED69BADFAC2CD1754FC84C0FF6750D2373F997
362DDA16A0D73B178FB7B67307204AF174AB871C254B8E7CD77058113B702B2C
13F341A972B67756D65C6A9F553C365E20F0BA59F8537C88E0C13F87CEC69C9E
0775F760C4EE10819388782A2CC2E9C000DCBA76E4EFC7B390E50611F3D4F6A9
CE60FC3B742F046E84B4A302F5DB51092CD59F103DEE2910757696C3F131517C
416687E6DF671911BFEFE08D1C5D0B16F9302960E29760EE101C5BDFBA4176A0
260ED46500F88BD388506DA361B0E9FD796196E66B332C82CFFEB7974F9E4428
B82C64ACBDF865B4356C4E2C8E6ED840AD5579B7E08BFA3BD81AB1FAE47901EA
E298F60FFB651A0ADDD1C312033C9D1FD4D0FEE44FAC4B0288339260EA0072DD
0AA168900C492640EB652F4ACF14A4F84878F5EAE4169AF39131695A11CC691C
FCA75087938B15ED1B742607D839E542C965383D5E6718EA6C25512F1532D0D8
545EE6AF47BF5B6F6AD0D9E44465D651D2236F883F1F42ECE339B694B19D2433
25A28A20C7E32793E2DDA8ED6D90F8041298B7A1BEA74CFC168681C020907C2F
D71D8CAE550B9209EF1B3842DFF0ACAF51333BF1843A269AEE0925234C833BA2
2D2A9012287D8BA8C4CB4307A1188ACC0BD7A133BECBF0378EAC1433C4F29449
540580286B13078AFD28021C7B1855552107E317BD51E605E96825738C4A4880
8C95BE60A97A0B555042463BDC2B93729B74259E2A2507127A24D117ED792DA4
8B7BF99C9687CACA75B3EB9B1F8C6B74C6BD5D38B22E96128E163916EB29EC6A
D9DC660D8CF4FBA48113F04B49F67164F0356272298EE0F055419C3A46076B9F
CD4EE6B2EE15434DAED7ABBFAC62C8F126AC7A75E7CA21A9A5236069B4C618ED
E986BE7C62B294C6CB4874850C1017B864BEC870BDC4F83A1BE2B815D288DAF8
F0B034FA3536E749426FD06482773CDF8D0D71D4A847A551B40006FA3D3BCFA3
1DA54175CAEEC46463DA19BD085F3E0EFA3AFF6131D4A59031632FE030485C58
5485DEE59478458BDCC4CCAAC9DE3F669EC4739C1301B45AFFCAE9686B7E9E8E
87C1E7679B3B8118B630F463A8545A56A053DEC2022A84EE83D6B900DDC00F95
8980F25A0414473A0EB3DE99C590F7B8390B9DFAD7202B0E9A43F058EB6BD219
2A98CC4896B1E7343B47BF693BBD86AC37F94241D5C4E4F28B01E83E3295DF38
55904153788A60AA13D350F719870591B0C9484E4AA28B2A1E12E281E09486CF
A0EEB68A824CF307C702444C7DA9C643C356CC09A90BA2C7842FAF9D17259C11
58CEC8D66CEBFAF1F7579209BBBAC0D13C4B588CE0DE89BEE5E707BD91116DB1
ADDCACEC0024A3C5F8024F52148A2821704A5537F4932B6B55E0AABE2DCCE74D
5315BACF04FF9ECD9FE239A107440330D596CA227BF892BEF5EEB064EECF0C69
036C3FC819E3A3D9E13FBD214C741DE73099CA5C696BBDBD3901B88AD1387508
0E7BFEE8F0A91FEF7E695483BAB95DBD5186CDD0FC5D45221C97ED86447E60EE
083F4CBCDD532D424F54C6224478B433A13EC00CA24069EE76AEF50C30A2BA4A
3E033AD85FA6F80A832919DDC65DEEFA180D882F7363EC74F04A7D73774FF9F9
0DF20DA87E901B388179DC5368DCCE058F1047377998B58841911783F7AA1929
28C2559DD91489F28831F0DE926BE8E6E7903218C324C78F6689692A95CBBDC4
FEA21F41A98BAB967E879D39266FCD85967DCA276142121FC04D1DF6EB2930AC
AE3EAFA3EDB3345B5DFB67E31F916A359F97F1F9CBA52C11E1AC805BE477900D
2D46C1E9E9A9D7D0D2ACCDDD48B9D6E903407148581317677219497D7E0364E6
AAF28A20D8EFB5C29A85A8D997F77B6E93D085A87A4694330CBE761C1D29AE68
688016E1AA10846CC8CCA89F825DDF45FB180B3DC7F928BBC696BC3E36E20369
5CC679864B0DC525160A661E9E47EEFDD0D68F8CF32A482980D89EC25346FE58
15B30F8856BD990C7A6A3692BD125D805D76EB48FEF129660BFACD075A533DCF
CD88372B542101DF8254CE3DC26E5C723FBA887AF6AEBBB7966A2D4A2BC4F24D
2AD210F49A9EEB5BC99FC7948650F6596E8A1253D6350E6800CD4273F875C228
47D96EB969482EB28FDF2AF11606393F43B16ADAEB35FED98F7B0600B5534C8C
F139B70E235923BAD3322492B56D994CD7285112CC07ADCDD7DF22B9978579B7
EC00E379918A082F768E72CC9F2DB23E65D0C1B50FD36B67B4E2366B8701320D
CAC10162C1A0AEF22639E39A12937313C6EC287679683E7A0E7BA2A6F0C41454
332A824553C570C4AF648BB3DBC727B91F1235329DAC76A8FF300AB7A45B644D
18887006A2D3B51D982ED475405351A9997E04EAA6C5537A4192D85F3705E663
812B44BD8896E344B64F61F86AD6256B2AC8E0446E8C134D5B9BE1AD67F83982
510A1C676A1360DE7A0D94B5B28AB316E448510AAB8A60524C3DB69B6D915820
7E8C41D814DFA409ECEFC42F4C0504DF413A1B7FF4E683F78896A2EB0AED5F30
8831D2C89E8BD6894A88EA99FB45E15DBD57C9A803C0BE4E251C48BF4349E34B
F441D52FED4FF4AE4120CED39EBF23F3670B3F5ECDE25037891DCEAF94728543
2ABA45D617DF6FDFA9524F4831CC1C6903B3787271AB8205A8CBB2EECF2F6FA0
E19E0FCB493AE76014BBABAC232722D39D999C936401AD7558828E8C42B41490
57D47015BFC0F440296EB09D7ADCF04AD6F4951F8480B6A84C08474357177374
34B67A71BF4C8F9FE411715B90AB48D760A5A23A366CEE04AC0F461F1D28EFC0
04FB5EF2287416DF74A59F5ECD7BB0FD234C1DCFBAAB226E7BBE613B576D819A
54CA641D8D1C784729A603F2EDBE3A1F93826F9BBD3321332B3FB4EFAFB36970
563A2CF7C3F9CA0002E3FB2940FD8A3425514B8751BDF790A4C322556511F1EA
D5C2BA37BB316E5214A9A4D5F7F45529BF8032D8BEC5A5E4BEB742C55BC73959
3AC45B15A5BDE096D5AFA64E0325397447BB2E1685657D0011C84B4E3AC44B9F
F4DEE96D543717D04E5AD1E5F3E745D4DB5F12915D2D3AEED0E2288E05027B2B
78BE8C23E28F978EF0CAF39A211FEAB9AB51A25E3C1AF3B35090ECEA7C38B040
1BB28A8F0411DE9F0894A4B54CF002E8BDA7097E45FEF41AAC3A7B86C1BA5167
DB7E8C1D299057A9CB81E51A3EB90D0C4ACB22C4043E5FCE6B0E9B02343EF4AE
982A6A7898DE8F256725779EC26B3AECC25007E76275D2B2A60A1011CED20F11
71D9E06070A83D33F2F8E749DE9551905ABAE84140487CD9105821D7BB9E9F05
A91594BE33DD29E85D01E6C8BD38554471C80C8E0821EE907E11F7DFB61019CF
4A02C131CC12C0009DB50CEAB4E03C4AC366287553EDDF96A0DAC81153868BA1
1E9FB9286BDB8E084FFA6A60DE21A2EB4FB8746F4FF98BD1B5872B4D0E05C400
F28AE47EEFE918CC97026F55B13807813BA9B5DBA2EBC5C6A7C2AE743A407E00
F1D33955424D296D2436F0A3DD9145429B8351462F3F8BF5DD393DA9D591C97B
A071A655EA62D3C857267668C37337216949472BA305134FC709F290D9917C98
FEF98B952B1AD1376E7A018E9DE120A2C0C34795E5E793FADCDD4CE846EDDB50
97BB8D685DC11C2379342AFCBE19680C0D45C9396A6E8992EB1BAC3C09B7258C
2EBEE36B12277387474BD26CF9314CACEE9971A75CA9D1DC0041B6A25F6356BC
BFA4E369DB22E9816861D015B0308CF2626E669EDC75D8663B3A4D11104BC078
EB8B9BCCAEF6134AD6984891D5B42734107A58CB1451343B98E3A1D4AD1007F2
F84B2138E6823CE9D00039DE6AE21492BCE61BB2714C3B619252205404DFB638
2FEECD0972D6DD240E989821F9D29DBC1C8F5E511385AB73D25CBA5802DFF570
64FD366664CD9D20A4649B61F2A3120A239F748A538A42304CF98D4D337A3735
129E2B2690C8B1301EB2E7DE64AD66BE77FB806D54B380B3BA167DF6DFE1EB63
9469FCEA095F49A3A7E0C209A473E8014ABD5D1FBC9B4B44C6809C4DC2BE0D70
133B10187F8ABAF226D57153C9A5D4EF70ACC78CB201C7045DBB9F3FFEE2AD7B
9B6AFD283EC15316671B44BE4992046ACF9E917C9B6D7824EF73C23C0AE230DE
F01497FB271FC7509599DAD5299F657F63FFE2C34058E21A6AB184C47C27F39C
8F0CD8AF30756D2FB9E31A95A6254AEDBBF9652C6866DC8ED47AF5172C4E1B5A
86823E08F4744E9BB97DEDC4CB080BE377B8BEF4B9C155F636489EFA29B8DD38
49417106F8F8D3FE67923BAE60D49C8FE4041D814DF74CF069B9C9563F7A5474
B7838DDDF62669B41A66CD6635470FD62E2E7FA5CBF78A515E7255D15D09D5ED
07D13AC096FE204E0A2E847F3B372206B6BCAD272FDBAF7F3C4FE982003A11C9
68A66C143AEB324693DE770174369E63041E33D959257AE817B479782E135403
CFAC7A0EA5B121C4C074CE56F2CFAEDB4AA402C6A9EF8547E62D5C6D6B5FEFC6
4AD534FE86F54A3C4156C138B200C11945A54B9CE8BA9B535BA25569F3A17342
BE7DE830229AEC0BA00244547A504326974FA7BE22ABA3F14C2981E5411F088E
6E42FB2B6D7A82ED42FD2302FC442BB57A5F14D76871DE1548D39BBC79BF0576
81F0D1F10E1493AFD4CCD70956276688E5F3C27783159FED14E73605B6EF0EBB
A4701D59967F5CF8DB27C95573876A325F031D8975BA219115B51AD21BC5DBEF
059174843985BB2160AE1D604C97DC574F11BDD1D2BDEE35D32C3565C4F72502
00AF60BC84440B766C6C2D29AF6AC36207D8934108572355930EAC00922BFCBD
7FBCA70B49CE2505E05680C4B2428EA19EFE6A6F067D86B5BB72604D80BDC037
D9D647F1DFB22FFD4F338A3A2EB524870F013B09895EB5EDCEFBF0C53E10260E
C749796E8BFC35B4170973FEEC86F4CA7AA3F70405061D9FF45A4A57E1B01AF2
184B5C238BB291163A1BE3081684346B48188F64979596D5DB95ACA676643996
40CEDE98BF31248990547629FAEAF6933F7E3B5E404C0A35F89FAF1B40B31FFF
20DB9248F95AD205F1665CF53A8FC07394902320656745EEF57D8B1D12A03EC6
D6BB7AA0FD8B580770AAEB8DD3102D3AEAA8AAC4DE98B183B0B06B79B7B39CF3
734AC8440452BF1B12AAA72C63028580325BBBA78C2FBDE315C4452EA32B29F1
F132082D1040C487A5F01CBB8BEAA9B283149D909257BE67A7B46C1C21DFCDFB
DA8620CE0BDC7D6FF613A63446364939B55E4680BEFA1DF0CAF8725FB8A57F52
136E52E087F301CD8BC8F5086D8FF4BF527FFDDC13AB3F88507950C3CE322ED9
D514A210F26593FE72C12118E6A96DE4D97E565568D920D9EC86A3BA04AAA498
E71A1669F2160E745913ED202B241C9D5D225AE37C2E4061AA1EDCE58336AA81
FD2367795AC354EC5F10B025BC56009F08A7C625510F90AFC2BC9452B780E305
DBDD31B6C278465E016F93C55879CD7FC8BEBBE9FFAA5D3D033F779BCBD7A121
D0CA3C9B549038F4E56D545F84025C860116E34D5DD20F719CE99FCF04DF05E0
625A367052999F818AA8EA636DBEE0684B1A568A22650B2085DC9CF63EA52C6F
B328CA55E742099373B29C148DF326026742D5F474A921EBC1588969226979C8
9AC1F489AAAD15B24CDFC8FC4124C0DDA85D776492EB97C44E197898B82BC5C3
67D17AB49BFFC344517A4B5EEB1653B8BC547869FC5088261091B73E4AFAD596
9D1A6E42F4E4FC21C32277792CC8391488C8DD93414B6F8A316C761EC313EA3B
77533A060B1BF3BAA2E25A3EE647F4734722C326C2AD93145F484B8D948FFF3C
A2B9EDA9302AAE51361DFBCA639E862DF84705B85665B35FF65F9CFF3DB33DB1
7D5DCF823FF0CAFC16B3702F06010720BE65F11CAFF505C4DE3424FD585EF45F
78C8E8D9268B56775BCECECF8622DBF8DF5E17AF5B2D21EA8845950807698C0D
9657F59F72141E97D6C86BDB624A6F058F68798703BCA17D277E67E61CC14B26
474EC3DE100A311109B188B32ACCD0B9618935FAA746F268B5F2A20ABC64C5A7
19FE921EBA102495D58023B2D3695CFEBD3572379435F3419FE07DBC9486C782
41405D284B5E53FB5F675FADEFCA88A7171D01D088EF4F08537FDF7B1A8AE4F3
A6D7EF9D0ED80255FE49C85FD21340FBE85E8044A40C2437242736592C440FF8
B12994323561138F77324F50A4DBBC11A71CF566DE346E685DDC7F64AEBC002C
1B2A8B62A379250B5DAB3B1A27F9C926443B17A27169562AA77C89A9358E680B
6066AC1E0355923448729CACC765D78ADD4EF81F49E205342CC80E40708605D5
E28C703022F28D213648DC593FFFC59C061F1C8C5DC0F106181EC366891416D2
209EDC7C0236D3A03EF206C46BC757143FA9F8A75A33DAE92351AEBCC9891B30
FAE0A6BEF39F05D4C86469E9EECA19A37BD8E9CE6A39F5A20A737D4D65157880
313501D2EF3C460BC418C706E721BDD53C315A232A0744529AAC8A3C4F164D2E
6B42E87012E1C5B6136DFEB888C9A884ABCFD4E35606615AF09DC553F60A8D8A
07864C391280C8546DFC75E3806729D9010F6DE7F623BE9C3B76F7357E667739
C440B7359E9FF05CDABE34C650CD671BE37BE3D24FBF8E4A3D874C713049F761
35871737844A57B312D655BD777459F6DD8A5E799B7CDFF5E4CFB0E92F8DD5E5
E5B03650BF6C54DC682112314832FBCDBC217A5D948879C7708D9E67C848E0F5
1EB87031FB05CA501A85B0FAEB9A588543579556BCC860AF91D0D8CA8A296442
0CE79CE409650340E271F064B1D7B4913FF0B677B2CE59F3874D44376728AFD2
8C559F6A9807904DB91498AC1CCAC9EC6FEC959D00BEA1199B03871E39D757F1
25F8327244DEBD2D44C44938A99A36651752A6E7B3EF060E3020926C4475ECF7
C33E6BA6B321418456C7781ADD5164CCD63F001167DB7652B9A03DCDD80D9BCA
D0C7D569BEAB8D9A84700CDBB91DD9D7EF4E4A7763CD54FD8A76037E0FBC9A5D
3F323B5ED9B7E224DB97335035B02123FA14BEB9D23FF392BD01B6B4F493E49C
D02DFC0A34D7282D9FC948F7114B4C59DC810A341EAD30DDBD8BA38BD541B4C3
7C9CDB194A4B9BE67496B4D595EFDD2066AABC3DAAA4D6C8AFB88946C411E396
63F2C548C2E737A623DB487A485CE5D1515B936ECD1372FF197B5C63764D9783
336FD22122BE63BB293206157A045D9843832C70D85E1CB64E1CD620A2445980
179D55A32385C33BBEE8B3846B51E8B75ED68E4C5DEC5FEBF51577CD0D6D6E0B
D220324C5827025C17BC1A144DB5BE6E0AD9F391B7491E4931C512B3B44FA5AD
B1C32A3C53B99DE2D5C8A9622E9FEA678C6037C923F7F7552F82A6E3E29D6206
9CD25BD683AF89BBF8E3FA6857031C0270D29C1483F59C3F875826BAAD4B8075
AB2C829FFEE1BCAFCAAFF99941F6AF7936F7B961CD850FCCD5A289F2BE7FA621
C70B5DE3A0ACA28F5E8919666DC164FB5A52074631BE4C71AC38324A77C0AF1C
7F64C94208E61D75A8BAD847B395EA9024FBABA1290E300B3BF48F35075FC6CD
372BE6E5420E2DA66D8452E7025E37E6EE885AD27348CF1B3968F6EF40C25857
9DCF3391D08A7EE58992F2ACF541F3BE615FD90E1F8C9D7D4A5A7A395780F489
99421B9FB8991815AF9DA75BAAF88D1477A0F545B1A456640B67AB531017B7EB
B7D8A7A672055B9EF7C068B7FB1276B5D8D0494BD3B6706A9AB4FD755BAAA72B
DC8FB42887B5ACB0B3D7A31B4750AA01A6F5959BD779ACC0B24669BDBAC9E64C
B3ECDEEBB876F9AF822BCD91AD7E5405570722B6BF5305DAD78620AFBFA6366D
2159D70E45DA3218BC9A5E5B8227C57D7A1F432C221AEE3023E9EAD5299E6807
841584D57F62DA55EA77415D2C48F7AF2784F2A611D7B8A4EE6CF5CF19268E12
2E14A9A77E7C8DB5BC3330354C2E442D3869B29D37B716D18AAB09D6696F8DAA
8B35993539369D3C9022C058E10EFEC7CAEDEEE4FAB7404CA172539742267867
12B5AC7F6A321F7F2B27F8C98C83DECE7FB41D0EC9AE8E10DEC56380F50E2699
F63C4AA75CA7E1EAE65F619299CADC02D5BFC7EC8845D214AA809CB60D761926
11066536E9E64EBBBED1CCC5CA6DD2A484F3197DB5C218FD5980239A479FB81F
21151DEE4113C4A7E7AFCACB320230A37FF11A6B954A62B3109B1DD7706BE7EF
18E3204D22308314612584DC5E0CF67F065DF65FFDB228FD7C99D1D9AA750E5C
B76315D821D41128AE7BBD570F07501DC858C0EBDA76F5B1838376E625A74A7B
DC541EE0994A2BD9A1F1AD11AE930DB680110131F0B290AAAE806120463CF97D
C1C0A713CDB3E3958835CDE883FF9586ABC4EFB89BF38479B1B41FFA6A35D613
433D9363FEDE78D319C01AD4D93478567C4CD6D8D17C7D63DBD7FE471914C791
C144A84F44DA09D398AA665407D26DE4347A2FB7D3089A078AA313B4ABF50AE8
69606B4095DBAC5CAA0C0F18086357809A211071AD474C7F583465E670E46268
AAC7212A485ACBE3BACEF0DF8562C4A36F9C7C0C04A4F9D7FA6819FE826E022B
86F951B6F5E9E5E31070AF310E86FF93EB4B1375EBA7BAD7B5D4ECFACF9501C3
56880E40D74B2F59D84B9DD4C727E4960C2D23E182783E373985823B3593A4C4
E5A2CC437F8A350D7C4DECCFFE2CACBAB1B57394893DE46FB420DDBF59AF074A
478C7C42F58438CACAC178F01DE7A6A7EF4F658F72D7F7B6EB7CF6E7B4F37DCE
378C62DF9C15B51A6995EA7095B1C349E4B0173EFD9869E4B1A155D10A8107B5
8878FF9312617D9D1B4A1F75AD7D7587ACFB5EEA7E7B435D0292A2ECE726540E
E5AEB6DC62AFDF7D3AD594A939481E89449732FF5A0F22DCBE342F18CC2E32E7
E014AD71DA189DDA360869BAC579ABC4BC0259CCB6E20F65452B1A1CC09CDB70
6EC2E492F41F0C7FFDB38EE60C34D83981EEE38270345EDF1C37DA020AA4BCB4
C18E917C272BD83D7FF813DB4A56AB52DF51AE26D55C7F03589C48861912D8B0
490BAFD83AFD4CBCE71D9F808978463F8F7965031BB54C5C46610E9F66BA543D
4E2C76D85162E92077AEC00EC90AC89956C539D5FAD23939EB5260EF94733D29
C1B92E4E16BE89FA135020939C51F38EE190E7462E27F20118DEE4182308A2DD
2705CAE5F51EBF1E3F966E7908BCA59666BAEAB1DDDCC63BAE080336CDA59203
EFC00868D120080F1216A02B61A061822D2480E9027CF06EA932A652FA785F9F
97CAC0513E2B80C3DA164EC2BE27943E4DA4379994874708A0BA5A7293FDA85C
2A42C00778D4419D3739E7A25F19775070DA782EAF765FD341BA3BF02B6BB2BE
346CF36E266C284E2E19D293A7A4E0FEE3D06DEF37C04D0FD1FF6A4031AB0BB1
AB76C866460D8572766DFD4045FF67FA831811648EDD19FE0819866987714C93
20FF859594EAD3695F3495B16E19AC21C5E8B3EF86E14B40C0A24EF103C81A05
19984E6440B28E6341A0FDCC03BEE55A57C07785943BA2E7E21B3A72EE81F3C0
F17FEE98438E013CB65D34CB93488F1E968139C21D4399F67176E5E6D7C6087A
BAAF3F9E462CB8EDD00B3CF404AC76101B00EDA965A885442D52E3724DBD46E8
CF80A88AC2B934EBF4EE23FBE4CFEADE7CBACDB916E46522D2D396F5E3A2FC4A
F6B07019F30CEC460A1F2B716CDEA6D191EA8A58EB236B14B6F7BBFA5922134D
8DC1502C0889B6DE341FD6DCB02F604944D435B972E7155E45CC29E600A0ACB1
B29A3472C822B1D24477D8733BD1A80F628E681EBEF3975A4BD567277545FF8E
ECFD493A3A55944CF37FCC5B8A92DB3977A84E7A9C7333808AE04FC9278D56C6
5562F8C973E09D8795EA47BC17D9586D6AD83D0773EA0FA2BD247C6C46A9D52A
CF9A7A668A91B683E9659D0048D180492A03306515859295E4F0F6F37198428A
561BD3CA11FFC68E8B25058B10F6E51E5E6FF5D47CF21A8F16337F7B6A4E55B7
CE740C903224B8106CE8BB9D75EBD55CA31A43A539D23D06860DDEF0E1958832
AF79F60C35E7A1B0E6007A4B33831C2E8B69B2529D141D7FAA70EAE528C64EAE
26F2573ECD02C1EB53AF8933CC1C4C5AE760FF77A450D9B20F119A3C517C2731
A66D77820533E5D1C50AB69C7543DC402DF620941AABCDD40C8A63662113475C
85568AAEC4103A8A12AA6AAADB9F9C084740C19F9741030948C3A96ADA98BB08
27DD92AE0D48A2AC354E4154A6BDB1F8C4004802E862260492EDC2D19323CEF2
689253352022DA1FC4F819BF8C9AF2DBE7EC4B038F1F2457BD2DDBDFAF3E6D26
64812621663F76F8FF5070742E2304C4290A34EEEBC442AC68479EA4867D9B1D
EB8902A96968B86DB9A667BE6A21E357FB5EC820191151EDE70D3BE5F8A46B7E
58DA2CFF1BD8761C7A18D5DF52390D177C00DFAF3B75C839ADCB54C8D519DCEB
5B4A69CC0AD480208F3659D55DF9CE34EA4F8F307E6253F093C5E5CE3FDFD816
57EF753D7534B0790883652FFBA396BDF1A53FF28A6297838EE1576D6B785FE2
1A51FCD175486BC0255FDCEE3F98CDF1855B740023523E6339A234E5C193F639
B729C0EFF1F47CE1D71DC8AE8FE2237092FABD45755CCF1AC2ADE932E5018303
10CE3288FD1918463FB6B5159DCD8BA5500932C00A7ED40E72B4F3E4DDC7B795
56293D6E6A3B1757E2BE6E0BCF05696FFA2A76A4BC9B63A7C7ECECCCA63E47EE
230835945F77C044D7041885A1B4D98AAAA9EFF655E9BB08A5FF9690A1DCC427
8A936EBD01A4FEFBA23635F32370BC50E6B691CC6F6ECB885084CF1BF3159ECB
00B12E9C4638CE63A734CC7038843871D3AA2764D7C640C9674CDBFA58CF0497
B4A122E34B10330659E5AB47014D1948B185914703CC80C9A54633CF2AE5DEAC
9CE5E78E1B9751E878178BBEA2FD06F148A029F980836E5F007195AAF06ACEDB
D0BE7F915F1F9019866A8E6D7A5D41217A2514B36BB672C43BBF90B7B7838A5A
B5355CD008C7864B29D445A614BFA4831D798B2260294EB9E8B6BED5F0F8E97A
4A4DBE04E2F60D1B7035BEA12069ACC88323D49C73480D4FF174A73E11EFC92C
DFDD752B0FFF7AD828C36AF71930EC46A322A82D92AE67120394642A9ACF5D75
B130A9F91979FCC7FF787B39222D31C97A2729CA193E424E79A1A56AF9C9BAB4
E4BD31BB9BE3A3C01B47AD6EE255E63505E5E0B053FF828A642909C9694E3D6A
BDF7C9850BE35B219EC081470DA8D93B4E1611E7F1F93B8DD2A0DD39E8CC63D9
4787606FBDD5AEDE97591F2BDE2F3CC30520727234EEF235CF519075F6F00DF6
41AEF5FDC218C32500D4ADC665B310A54E9A73838E5BB6EBC1A9229D55D271E0
97F80FEDF6DB0687DF673799B16A50CD656E4C0513D960BBFAA450A1E3DD1DDB
5B329C54B631B42DF2D91E6019F3B525798B9A9CA03EB9EDB44A5D21D4DAAAB0
2D1CE2BA56D06D6DB8AED825521A91D6B2069318195FA41DCE8BE6B1EAB92F07
40B90A5F6B1F0C20606C5A468FE65A3759C70E901AB273066821DC412215FAA9
A6399FD066BF8DDE23AFED9180B413E78C811971CA87219C9E1118B5B250EF91
11CF355AF71E0CC583E748F5131FE60F35823FD03C7E7B24DC7AB3756F55FB14
C9C21BC207BC05CAA58A87ACBE5134C480D839E1593CCBA6F0740B8F68CC631F
3F10323A84248393ECC60D7318AA8FC186DA1BFA7F73CAA20747E4D05F78160C
7C5D4F17CB3AB05EC417DDE55725B128687B96D9F8785BB5B75A1D184F9E48C9
0F1F9810D08B1B8404F1A25D3F7630DA2B1572B08623E8683D32467B736E08A8
5D25B89FF2A9896E800C0A4E7A3439A1BFEA786FDA37C2780969F4EC2007975E
2333CA6984E34DF5517B6F7276228DA7C3130B71C371C30A669B2269961C75EB
8CF080D581F86548EE66FAF0D602DBE596C8D910CA4B30C0D98B283E5569A680
AC6F03C058BD9B31BF0E19CC78631FDC0A1AEE5BBD5EB5CCB1AE95EB439D0830
DC63195C456DDCDB05617B116C81FDC856D721DD9ED32DA8281D2F4E3B2A1DFC
54EFDA5BE8C495C5D72B00EC79A26D6D4C323B0FE4C5C74FCA469E8F6DB2053B
3A0DC083D33512260B7EDC04348923B6EA9ABFFEBEC4096B3D140A9073D7DECA
CAE5D6CAE6A62DC1A8A2642112A4F37D338B54FCE9552D62A7C7B18F24866B63
2888524345DFB71D8012A4D4CDE791DC175979C5E8CC8BEE206534541EC0C07C
2EC25E90C8DCC243C8E2A9EBF899D087D36C2289758A2D8ACE975CE93C8A5860
01D02341B90F5DFBB4E16F07969AC2CA92ECF3F05FDC3BC488638DDD5464CAC2
D064363F9CCBF4B5406D73F5E55CF467EE9C0373ED783DC370CF02F8B9D5A05C
593FD4270BED8DFDDC90A0D9DB940B053F8DE56955C7A0F60A939DF0BABF9107
64F0DA1C56C91E48611ECBBE5026402A4F78814C51787A8BE1CB3F9D7D2A9384
AA7BF60B89F6942CE70ABAD7A04F78A039DF5D2CC09702B2B15937041A455741
77E15CEDD12DF50533967F3AC4AF2ABF36D1C0D865330601F9CACA9B68353B92
E2863CA06CF6D1F9498A3B90CAC5A9852B776F12890EBF6C8B943FF30D835575
1E6165897AC09E14B5182E7CA7D1BE7CEA7DD45466A30D9853706675BDAFBB11
D1C0C61276D94D4A90FE6E63F3607892C8F065B1F2EFB49400E2928D7CEF3C58
12EB8C4702F8F1FF48C926605FCD53B1DC91A91C03770E14EE8554F78E258DC6
1644A67A7F6B01CB030CE75812B8FE049EC430E48C6AC5EE953B6B68D6D26DBF
549447506F061F3D17B69ADB563C834EBEEA9552554E5F0689D4EC235B0AB46E
24766377A777634A68C4A407F5320D8D41AFA3B50224D77E8D6C29C4944139F3
965C009130A4108796926F5D2B7F9B7E17F307981D4C0F6FD8B573E8CCF0EE74
3EB77A21688C434C2A2BE7AD556981A9EBCC157379FFC47A841BD8B2A72F63E7
4EB6D576E12B8A8876CC73F0F6D83CA00F5EB3F70C7FEA5C34935C74E64C0434
B0CA822102C4E30E2360960B6C1A200048C4455D823CE83C79E63D91AECD8EEA
36DF1625A26FDED84DCA2EEBCD77BC991423897117A4DFF5E734CA2860BEEAEA
3866A02B61118A58B5AD40CFB04327DC34A459A1575B6AAADA0CA01D7B84B7DE
B0FA3E054F322F4D2CF3434DF96D2A70C0F7B21AFC74865CBE946E8611F9A67D
DD57061118673C8701A2F60C09B8771DDA69A25F451E6DF8286E74A39E08C5EC
98BAC7B5FE95A8F5AA869B27264BBCB759CAB10B1C8EF31D971571BBAFEAEDDC
76D32396C65B01977273B67A2081D58385205BBBE55AE3BE73F698ECB0803869
71D82B10478F8C8BB72D746C3BE6CCEE0D867067BB4318762195E8EF278AB248
3610B2FA1475CA4F577C88F4BEB1E8B474CF0195C16B4C0B48994287E4F6BFF1
EE476FD6A11A5E7F4C91906A3D120E831851697D792DFA04B6457399BA6C1CD9
83F831A4BE6C00F1F3FF59D625D64FBD4964237258F58A4063539FB290FF7913
D5BF16434FE807424A83030AEE597C74FD7A137F2B79BD9AEE89795C1F31ED79
C65E4D5C7906092DCA51C76A8FA85B5725B06A860BD1A0AF6D1D75DA72F37811
B115BB58AB413672E476D830D9F116EEECA8D80BAB3229AC2AE24A91375CEEFA
37074F9721CC7C393EA96BFD37CDB1088C0D80B73B695B76DA91372199828F02
E0B4B4C68DFB5EC4FED0EC2FA367D78A99908A559DCB57216ECDD6B8737D8389
FB632EE43DA61C9E6FBC9826611CCA115569DF19414159A3F780FB87ACAE79DA
5E62AE64808514973F6CBEEB982F9122884B17C224DF92DB1722BAEF08C63083
6FC3F21B1F3AFEB62F6311EBFE682DE1115A9EE6E82BAE1F51ADF94C39F38C49
3971D109E9BDCD973B71280BA6FB381052E1135F1A63C9C4A055167ADCD8D279
3F6679D9F96578053B4F2DE0E48AEFC21CBE554B92D88F3D74CE320FFD29F7F2
24E7246870845AE76C12990175FEEA9DFC6E72CF68CD5AC8361C8201AAAB09B5
08A45C1D6C61658CABA181F7ADC65797FA41CF4C3C00C9F5A8BD0307B7D2F2CE
5B948610E5C17488D22AA80A3E94679EDCD5A00566B79CD92796EEDB7DFEDB3F
52899471B2152F3096F6F4F3A3C89A265D1B47A713920352C114195616D8F36A
C38D843613F3D10C86D7C27388E98501465DD325FE23A68FDBF2E2FDEE27DBDC
318793220C846986855B978C4389C66FA1F0E04E8C70F1800B68D57CC2E83E14
D0683A2BC8267FF8DE16C8F7338A3FD03F436CA4CFC71C184735F6A94F28E8D8
191E3D37409BC7F38C3599F6703E9571CD0B46813BED6F5044234BA8B059C780
B732514E3E277FC94389F1DA9EFDA0A9149E080BC8D91F31B945184F8235D1AC
C31E34C65D59B77D70DFA78B78009FB9278E912624A6D158378E7C7900D0DC4F
FE7957C64FE641FE9B5F5C628B548FBC2EDEBD57923CF24786CD30228ED4CC2C
4F037D2C98A4B2003C5BAEDA4A39986BD3FC893262BA1EAF918A9652BB5B3465
43DA2661A15E7DD814DC1C0FF113C523BA98E017A1BA9BBBDBEFE73F24A36312
8E639DFB23E313DC2ABE155CC36614A6E17CA06AC0EFE04CE373B99610CE2B05
685F73C6E3B1B3180A28A020D0EA7E57074DB8A10BDEA7950C70719FE382E516
2DA89AAB10FBD91B5F0FF348C5D59457D98DD1B1BB8FCA4D191511264641C046
093D575710A12D142528CF188362512786122EE35DAF521CAB9E9A215B404D50
B3129142D1FE31878F19E4D424AE86DADC27940D021E120583CC4E1CCC7FA954
0F74094BFA772DB295E92DF8A6DFB6AFF7ABF45CCE68DC60F2240A4EE8A5FDD4
011A494DBE2FBDFAFB45BFFE8CEACA7CF3F97576ED35BCFBBDAFE94BFD4FA6F4
F791CA703A89FF9F9029344F0524C4F0BC072AD4A078D9EADC51C7C3D0BC4D0F
405379F77DA2CC0E57EF01842DB7028CA3389716EF613A48A6CCC856E24483BA
2C17286AC48B0FB46E8EC971FDB25B670EE30C60A5E7FA874F53E7FC5B3ABF90
DF63C686E262663C744ABD97E79DEBEB59C3D884F86DF7B270AA109E8365BD4F
D422584F7F22169D093865E24FEA1EBBBF71FD44400E47B3A0DA8D1D48166530
7CFD525FF4466FFA3C6996FEBD5F5E6F9A8CFFA290D8A464F97B9999780D8655
4EB413E1E75F63893A0B9755991EB6753410622609ED8CFA53B04DC46DE85752
C5AE8549D983D6513B7DEEC506A9900DE452CC719CE817CFD2948472872BA77F
BB942A1A55680172D7397C6485F3F34DFB96732FFF6153304A827E2159151434
47DBC92344F498DA799FF52916F0AB689008FDECACF42A82B9F6B2B31C9012A2
6A9676182B3FB0B92490B249302889F796E7BC4A6D8CA3FE648573F7890A2AC5
5DFC74A54FDFFCACB2692BE30C6F7C549AEA658E08AAE2DE6AF55EF4CAAD90B4
4F56E4F755049DF8A6CFB1D2AF8C6D946E0FFD857CE907551D6680BCEF4BE30E
D8ADDE45A6385587F05C360184FDB51CA7AC851164E387D7ADB79F1D5357E5D9
07BA24A59D30F4933577DBC7CD7174384C8A130A485DB6BACAA0E1F708927FED
3AA0E0E780E9F91A6EB782E067823579AAAC096B2FF0A08CFB55D8C6DF073A74
4EA529873A9BA49708543F6E7388B68B84DA4B4633B2CE0D4753DD2F721A8E2E
777C6F0EAE1387B6E586508A9DAD6C603D97F546B02E0132F77103D763C8B2E6
15AFC24946B6A7F88F182F98EA52038D9471B69A8EA24739F95ABECC3A9CD557
E3DCB9230C5CC956857FFFF1EA298F9D55177B353E2B3329514A8B6453580B21
FA53446691AF89C0E1170AF384C1F360768FB9D115365AD93D09B02285342CED
46122A7E40FB80ABFAA4EB93E6B23D20B0BC964E2306A0CEDB20E3B8D4B412AA
05043B23E0CBD8E7C9A4F5C83CF45E99CB07CFF7C2BC91AD0AA7CB2E21709FE7
75FCC40E7CF048639A1EC3A630CDB8BEC5A8B8C3EBFF7ADCB166337A2CE6B670
D348FAF96884BFA6E9213D2F581AD339CACFE40BFCE074C39EECE379B63D3A7D
13733DF735A10106CCBED9DED915B7D8A5E892CEB608C8A056092498824C84B9
A35573FCAC108A9A0FBF8FC439404983CA440D23954FA84C57067E100512BC21
780B51F74B4D09D1426F57CA6F4DD89F2BB304B1EAC247BDEFBB11503A894B0F
8B333CC8D46804F398AE8F6A5DD43F736D5139C211BB03E51B8EC756E7E2CBF7
2329A2222BCEB3B6F2ADB3151CEDBF074B05DC40F27D4C044137F39CDF5FD55B
8E9AC620127EF87F4341297A9D8930D5DC5C6651AE55DE54A7476EFDFA4F4EFE
F2AD217388D86D13919A5D3AAED9BEA22C0CD7BDB6B7D5F7B3813A527E4DF578
826BED77B963A21CA0804FC2D4E9ABE3F30E2C6C29EFEE8ABD52606EBD75C837
F1B825FF013EEF94E426A2AAC4EF1B262E62627638B18A2B6C3EDEF5171FEFA9
C453A3C82065753C4A63544FC9ADA50252731899B72858302894A373CFACB3EA
31CDCF1C44E6917386810AB7E5332FE9570F441A1C271E6B2143230AC3A74C09
60A94634C12C9296ED7025B73D3F00789685916CABCABEA004CF59A1E311F079
28B3B548237AA5F70AD27197948012624B23550721738AA49DC94304558BE1FD
F071AEC2755D4B4FC1635E6DB083CB6870C92C924B8048D52EB2B66A14EC3EA8
1DA91AB668266E86766133F468ED56491238F16FBA0C3BB15B68D6C04B6B42A0
8F44AC1A738638FDC8C26AB96D0B320285C9068FD0FC70D15C08C436A63E480B
9F384828805D955C57EA2BBC9F72494537F2597299E8466628B9331C42EDE8A7
7C87D3564CEDBD1F75F9C1BD769A4E76302F6CDC88B30E09AAD15002BD62CB4F
08FE41782EE354AC6ED92011199EB1F2DDC5ACB9A270A58EBEC5C272B7B3335A
2A0F8D830151BBEAFD433FDD491E4F675293388C033FAA464057137E337627A1
25AD294D3731BAC5696C72CD2F4BAE92DA7D2425905CFCABF6CF744A3D962E47
D9D5C9B1A4CD347101160249DBC4B8AB3274C79BF6BCD49F2C523D0C5CCB52AB
25C632C04627FA31D3C86829107039004B47235B6A53101897D082BDACE14D5D
6258C1B99C2ED1C587E095A53014C9CDB081163F892AE5F11BE76021CBB5033E
FF13F537F5CBD3473224BCE2C02A98C59CB91DBC9360B1792A2463E052CDD93A
435AF947D5A591CB4C9815D4C9D0DDBDE6765869D090230A65BA8A8A4798ED03
1B0B2A245B53C32E828D16BF93A2CC7ABA7C3D43F6A5CD95BB358997731EE2C9
877E22B00E554693E0C044F0AEBF71875C7D22500DE6257FFA2714457A859F3E
D7E29BE2BA500DA39F76288FB81009514968F563A6DDBA0CD74F7D08DFA93DF3
AF4ABD796C4AB849E05539E6F8052578C87AA3BA01CCEC72177F9F7461CB1916
41E41EA8A44689183362404BE2876A6190F972B054F593C9A72E0EB21EAB2D9A
A969887C9ABBE67A900DB371D5FE1C37AAD49B412F4814C16B89C08DADE2A55E
62344625445B1AC680492BCB57F6713C0D7295ADB9FD703BAF9C229B62140BF4
6147EE2266CBFEDBEFCE5503D25B00EF6BE03663E63A93298CC22E341F36A997
5A74A3DE21E9380A6EDE70DAA8ACD3E9F8F2E397381D725EAE3E63628E92AF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (hw4.dvi)
@start /Fa 197[23 58[{}1 83.022 /CMMI10 rf /Fb 133[37
44 44 60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46
42 25 37 46 37 46 42 3[23 1[23 1[62 1[85 62 62 60 46
61 1[57 65 62 76 52 2[30 62 2[57 63 60 59 62 3[65 23
23 1[42 42 42 42 42 42 42 42 42 42 1[23 28 23 65 1[32
32 4[69 20[69 1[46 48 11[{}70 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 472: Homework 4) /Subject (CS 472: Homework 4) /Creator (LaTeX with hyperref package) /Author (Sean Penney and Paul Atkinson) /Keywords (cs472 ``computer architecture'' clements ``chapter 3'') /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 -328 a
SDict begin H.S end
 0 -328 a 0 TeXcolorgray 0 TeXcolorgray
0 -328 a
SDict begin H.R end
 0 -328 a 0 -328 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 0 -328 a 0 TeXcolorgray Black
0 TeXcolorgray 0 -120 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 0 -120 a 0 -120 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 0 -120 a 0
-120 a
SDict begin H.S end
 0 -120 a 0 -120 a
SDict begin 12 H.A end
 0 -120 a 0 -120 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 0 -120 a 2730
-37 a Fb(Sean)28 b(P)n(enney)e(and)i(P)n(aul)e(A)n(tkinson)3385
63 y(April)i(27,)f(2014)3397 162 y(CS)h(472)e(HW)i(4)p
0 TeXcolorgray -5 345 a(\(3)p Fa(:)p Fb(8\))p 0 TeXcolorgray
42 w(The)34 b(b)r(ene\014t)g(of)g(a)g(general)e(purp)r(ose)i(register)e
(is)i(that)h(it)f(can)g(b)r(e)g(used)g(for)f(man)n(y)h(di\013eren)n(t)g
(actions,)h(and)e(can)208 445 y(switc)n(h)28 b(up)h(what)f(it)h(is)g
(doing)f(mid)h(program.)38 b(Ho)n(w)n(ev)n(er,)27 b(b)r(eing)h(general)
g(mak)n(es)f(it)i(so)f(there)h(is)f(memory)g(w)n(asted)208
544 y(indicating)i(what)h(it)g(w)n(ould)f(b)r(e)h(doing.)46
b(A)31 b(single)f(purp)r(ose)g(register)f(can)h(then)i(use)e(a)g(lot)h
(more)f(of)h(its)f(a)n(v)-5 b(ailable)208 644 y(memory)e(.)p
0 TeXcolorgray -5 810 a(\(3)p Fa(:)p Fb(9\))p 0 TeXcolorgray
42 w(A)27 b(misaligned)g(op)r(erand)g(is)h(one)f(that)h(is)f(not)h
(aligned)f(on)g(the)h(w)n(ord)f(b)r(oundaries)f(of)i(the)g(system.)208
943 y(Misaligned)f(op)r(erands)g(are)g(an)h(issue,)g(b)r(ecause)g(2)g
(memory)f(lo)r(cation)h(ma)n(y)g(need)g(to)g(b)r(e)h(read)e(to)h(get)g
(an)g(op)r(erand)208 1042 y(if)g(it)g(is)f(not)h(prop)r(erly)e
(aligned.)37 b(Reading)27 b(2)g(memory)g(lo)r(cations)f(to)i(get)f(one)
g(op)r(erand)g(is)h(ine\016cien)n(t)p 0 TeXcolorgray
-46 1208 a(\(3)p Fa(:)p Fb(24\))p 0 TeXcolorgray 41 w(P)f(=)g(P)n(oin)n
(ter)f(adjust,)i(Pre)e(or)h(p)r(ost)h(incremen)n(t)208
1341 y(U)f(=)h(P)n(oin)n(ter)e(direction,)h(Up)h(or)f(Do)n(wn)208
1474 y(B)g(=)g(W)-7 b(ord)28 b(Access)208 1607 y(W)g(=)f(P)n(oin)n(ter)
f(up)r(date,)i(W)-7 b(rite)28 b(bac)n(k)208 1740 y(L)f(=)g(Data)h
(direction,)f(Load)g(or)f(Store)p 0 TeXcolorgray -46
1906 a(\(3)p Fa(:)p Fb(26\))p 0 TeXcolorgray 41 w(The)34
b(register)f(r6)g(shifted)i(to)f(the)h(left)g(b)n(y)f(the)g(v)-5
b(alue)34 b(in)h(r2.)56 b(The)34 b(result)g(is)g(added)g(to)h(r5.)56
b(This)34 b(b)r(ecomes)g(the)208 2005 y(e\013ectiv)n(e)27
b(address)f(for)i(data)f(that)h(is)f(loaded)g(in)n(to)g(r0.)p
0 TeXcolorgray -46 2171 a(\(3)p Fa(:)p Fb(30\))p 0 TeXcolorgray
41 w(When)i(a)f(n)n(um)n(b)r(er)g(is)g(copied)g(in)n(to)h(a)f(lo)r
(cation)g(where)g(there)g(are)f(more)h(bits)h(for)f(that)h(n)n(um)n(b)r
(er,)f(it)h(uses)f(the)h(sign-)208 2271 y(extension.)36
b(Sign-extension)26 b(tak)n(es)h(the)g(sign)g(bit)h(and)f(extends)h(it)
g(out)f(for)g(ho)n(w)n(ev)n(er)e(man)n(y)i(extra)f(bits)i(there)f(are.)
208 2371 y(What)i(this)g(means)f(is,)h(if)h(y)n(ou)e(ha)n(v)n(e)f(a)i
(n)n(um)n(b)r(er)f(10)g(for)h(instance,)g(whic)n(h)f(is)h(00001010)c
(in)k(binary)f(and)h(y)n(ou)f(store)208 2470 y(that)f(8)h(bit)g(n)n(um)
n(b)r(er)f(in)n(to)g(a)h(16)e(bit)i(n)n(um)n(b)r(er,)g(it)g(then)g(lo)r
(oks)f(lik)n(e)g(0000000000001)o(010)o(.)p 0 TeXcolorgray
-46 2636 a(\(3)p Fa(:)p Fb(33\))p 0 TeXcolorgray 41 w(Blo)r(c)n(k)h(mo)
n(v)n(e)g(instructions)g(are)h(useful)g(since)g(a)g(blo)r(c)n(k)f(of)h
(registers)f(can)g(b)r(e)i(copied)f(to)g(or)f(from)h(memory)f(with)h(a)
208 2736 y(single)19 b(instruction.)34 b(Blo)r(c)n(k)19
b(mo)n(v)n(es)g(are)f(easy)h(to)h(understand,)h(ho)n(w)n(ev)n(er,)f
(there)f(are)g(man)n(y)h(options)f(that)h(determine)208
2836 y(ho)n(w)27 b(the)h(mo)n(v)n(e)e(tak)n(es)h(place)g(whic)n(h)g
(can)h(complicate)f(things.)p 0 TeXcolorgray -46 3002
a(\(3)p Fa(:)p Fb(34\))p 0 TeXcolorgray 41 w(This)36
b(instruction)g(copies)f(the)i(registers)d(r0)h(to)i(r2)e(and)h(r4)f
(in)n(to)h(sequen)n(tial)f(memory)h(lo)r(cations)f(using)h(r13)f(as)208
3101 y(a)f(p)r(oin)n(ter)h(with)h(auto)f(indexing.)60
b(Since)36 b(it)f(has)g(the)h(IA)g(su\016x,)h(the)f(register)e(r13)f
(is)j(incremen)n(ted)f(after)g(eac)n(h)208 3201 y(transfer.)208
3334 y(A)n(ttac)n(hed)27 b(is)g(the)h(picture)g(of)g(the)g(stac)n(k)e
(\(TheStac)n(k.png\).)p 0 TeXcolorgray -46 3500 a(\(3)p
Fa(:)p Fb(36\))p 0 TeXcolorgray 41 w(Let)h(r0)g(b)r(e)h(the)g(register)
e(w)n(e)h(are)g(m)n(ultiplying)h(b)n(y)f(a)g(giv)n(en)g(v)-5
b(alue.)208 3633 y(a.)36 b(\(r0)27 b(<<)h(5\))f(+)h(r0)208
3765 y(b.)37 b(\(ro)27 b(<<)g(10\))g(+)h(r0)208 3898
y(c.)36 b(\(r0)27 b(<<)h(12\))f(-)h(r0)p 0 TeXcolorgray
-46 4064 a(\(3)p Fa(:)p Fb(44\))p 0 TeXcolorgray 41 w(It)f(mak)n(es)g
(r0)g(a)g(p)r(ositiv)n(e)g(v)n(ersion)f(of)i(itself.)p
0 TeXcolorgray -46 4230 a(\(3)p Fa(:)p Fb(48\))p 0 TeXcolorgray
41 w(A)39 b(pseudo-op)r(eration)f(do)h(not)h(directly)f(translate)g(to)
g(a)g(mac)n(hine)g(instruction.)73 b(They)39 b(are)g(resolv)n(ed)e(b)n
(y)j(the)208 4330 y(assem)n(bler)31 b(during)h(assem)n(bly)-7
b(.)51 b(Pseudo)32 b(op)r(erations)g(generally)f(giv)n(e)h(information)
g(suc)n(h)g(as)g(data)h(alignmen)n(t)f(or)208 4430 y(sym)n(b)r(ol)27
b(de\014nitions.)0 4529 y
SDict begin H.S end
 0 4529 a 0 4529 a
SDict begin 12 H.A end
 0 4529 a
0 4529 a
SDict begin [ /View [/XYZ H.V] /Dest (lstlisting.-1) cvn H.B /DEST pdfmark end
 0 4529 a 0 TeXcolorgray -46 4612 a Fb(\(3)p
Fa(:)p Fb(54\))p 0 TeXcolorgray 208 4612 a
SDict begin H.S end
 208 4612 a
208 4612 a
SDict begin 12 H.A end
 208 4612 a 208 4612 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.1) cvn H.B /DEST pdfmark end
 208 4612 a 385 w Fb(M)-13
b(O)g(V)42 b(r)6 b(1)25 b(,)60 b(#)l(0)707 b(;)71 b(T)7
b(h)g(i)g(s)71 b(s)13 b(e)g(t)g(s)71 b(r)9 b(1)65 b(t)9
b(o)67 b(t)9 b(h)g(e)67 b(v)10 b(a)g(l)g(u)g(e)68 b(o)11
b(f)65 b(0)208 4712 y
SDict begin H.S end
 208 4712 a 208 4712 a
SDict begin 12 H.A end
 208 4712
a 208 4712 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.2) cvn H.B /DEST pdfmark end
 208 4712 a 9 w Fb(l)9 b(o)g(o)g(p)199 b(M)-10
b(O)g(V)g(S)47 b(r)6 b(0)25 b(,)70 b(r)6 b(0)25 b(,)64
b(LSL)45 b(#)l(1)259 b(;)72 b(I)9 b(n)g(c)g(r)g(e)g(m)g(e)g(n)g(t)g(s)
67 b(r)9 b(0)60 b(b)s(y)d(1)208 4812 y
SDict begin H.S end
 208 4812 a 208
4812 a
SDict begin 12 H.A end
 208 4812 a 208 4812 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.3) cvn H.B /DEST pdfmark end
 208 4812 a 388 w Fb(A)-10
b(D)g(D)g(C)g(C)47 b(r)6 b(1)26 b(,)70 b(r)6 b(1)25 b(,)60
b(#)l(1)408 b(;)72 b(I)9 b(n)g(c)g(r)g(e)g(m)g(e)g(n)g(t)g(s)67
b(r)9 b(1)60 b(b)s(y)d(1)208 4911 y
SDict begin H.S end
 208 4911 a 208 4911
a
SDict begin 12 H.A end
 208 4911 a 208 4911 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.4) cvn H.B /DEST pdfmark end
 208 4911 a 391 w Fb(B)-7 b(C)g(C)51
b(l)9 b(o)g(o)g(p)820 b(;)76 b(I)12 b(t)73 b(l)11 b(o)g(o)g(p)g(s)76
b(i)17 b(f)76 b(t)9 b(h)g(e)68 b(c)10 b(a)g(r)g(r)g(y)71
b(b)12 b(i)g(t)77 b(i)15 b(s)76 b(c)12 b(l)g(e)g(a)g(r)g(e)g(d)p
0 TeXcolorgray 0 TeXcolorgray 208 5094 a(It)27 b(turns)h(r1)f(in)n(to)g
(the)h(max)f(registery)f(size)h(-)h(r0.)p 0 TeXcolorgray
1929 5529 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 0 -328 a
SDict begin H.S end
 0 -328 a 0 TeXcolorgray 0 TeXcolorgray
0 -328 a
SDict begin H.R end
 0 -328 a 0 -328 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 0 -328 a 0 TeXcolorgray 0
TeXcolorgray 0 -120 a
SDict begin H.S end
 0 -120 a 0 -120 a
SDict begin 12 H.A end
 0 -120 a 0 -120
a
SDict begin [ /View [/XYZ H.V] /Dest (lstlisting.-2) cvn H.B /DEST pdfmark end
 0 -120 a 0 TeXcolorgray -46 -37 a Fb(\(3)p Fa(:)p Fb(60\))p
0 TeXcolorgray 208 -37 a
SDict begin H.S end
 208 -37 a 208 -37 a
SDict begin 12 H.A end
 208 -37
a 208 -37 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.5) cvn H.B /DEST pdfmark end
 208 -37 a -9 w Fb(A)-9 b(R)g(E)g(A)52 b(v)9
b(e)g(c)g(t)g(o)g(r)33 b(,)56 b(C)-8 b(O)g(D)g(E)o(,)53
b(R)-10 b(E)g(A)g(D)g(O)g(N)g(L)g(Y)208 63 y
SDict begin H.S end
 208 63 a
208 63 a
SDict begin 12 H.A end
 208 63 a 208 63 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.6) cvn H.B /DEST pdfmark end
 208 63 a 788 w Fb(E)h(N)g(T)g(R)g(Y)208
162 y
SDict begin H.S end
 208 162 a 208 162 a
SDict begin 12 H.A end
 208 162 a 208 162 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.7) cvn H.B /DEST pdfmark end
 208 162
a 208 262 a
SDict begin H.S end
 208 262 a 208 262 a
SDict begin 12 H.A end
 208 262 a 208 262 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.8) cvn H.B /DEST pdfmark end
 208
262 a -9 w Fb(V)g(E)g(C)g(T)g(O)g(R)74 b(M)-13 b(O)g(V)42
b(r)6 b(0)25 b(,)60 b(#)l(8)1105 b(;)73 b(l)9 b(o)g(o)g(p)64
b(8)f(t)9 b(i)g(m)g(e)g(s)208 362 y
SDict begin H.S end
 208 362 a 208 362
a
SDict begin 12 H.A end
 208 362 a 208 362 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.9) cvn H.B /DEST pdfmark end
 208 362 a 389 w Fb(A)-9 b(D)g(R)47
b(r)6 b(1)25 b(,)55 b(V)-8 b(E)g(C)g(A)208 461 y
SDict begin H.S end
 208
461 a 208 461 a
SDict begin 12 H.A end
 208 461 a 208 461 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.10) cvn H.B /DEST pdfmark end
 208 461 a 389 w Fb(A)f(D)g(R)47
b(r)6 b(2)25 b(,)56 b(V)-8 b(E)g(C)g(B)208 561 y
SDict begin H.S end
 208
561 a 208 561 a
SDict begin 12 H.A end
 208 561 a 208 561 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.11) cvn H.B /DEST pdfmark end
 208 561 a 389 w Fb(A)f(D)g(R)47
b(r)6 b(3)25 b(,)56 b(V)-8 b(E)g(C)g(C)208 660 y
SDict begin H.S end
 208
660 a 208 660 a
SDict begin 12 H.A end
 208 660 a 208 660 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.12) cvn H.B /DEST pdfmark end
 208 660 a -8 w Fb(L)g(O)g(O)g(P)184
b(L)-7 b(D)g(R)51 b(r)6 b(4)25 b(,)77 b([)22 b(r)9 b(1)20
b(])27 b(,)60 b(#)l(4)408 b(;)73 b(g)10 b(e)g(t)67 b(e)8
b(l)g(e)g(m)g(e)g(n)g(t)67 b(f)6 b(r)g(o)g(m)49 b(V)-7
b(E)g(C)g(A,)72 b(p)9 b(o)g(s)g(t)69 b(i)9 b(n)g(c)g(r)g(e)g(m)g(e)g(n)
g(t)67 b(a)10 b(d)g(d)g(r)g(e)g(s)g(s)208 760 y
SDict begin H.S end
 208 760
a 208 760 a
SDict begin 12 H.A end
 208 760 a 208 760 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.13) cvn H.B /DEST pdfmark end
 208 760 a 391 w Fb(L)-7
b(D)g(R)51 b(r)6 b(5)25 b(,)77 b([)22 b(r)9 b(2)20 b(])27
b(,)60 b(#)l(4)408 b(;)73 b(g)10 b(e)g(t)67 b(e)8 b(l)g(e)g(m)g(e)g(n)g
(t)67 b(f)6 b(r)g(o)g(m)50 b(V)-6 b(E)g(C)g(B)o(,)72
b(p)9 b(o)g(s)g(t)69 b(i)9 b(n)g(c)g(r)g(e)g(m)g(e)g(n)g(t)67
b(a)10 b(d)g(d)g(r)g(e)g(s)g(s)208 860 y
SDict begin H.S end
 208 860 a 208
860 a
SDict begin 12 H.A end
 208 860 a 208 860 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.14) cvn H.B /DEST pdfmark end
 208 860 a 388 w Fb(A)-10 b(D)g(D)48
b(r)6 b(6)25 b(,)70 b(r)6 b(4)26 b(,)71 b(r)9 b(5)519
b(;)67 b(a)t(d)t(d)c(e)9 b(l)g(e)g(m)g(e)g(n)g(t)g(s)68
b(f)6 b(r)g(o)g(m)48 b(V)-8 b(E)g(C)g(A)44 b(a)t(n)t(d)i(V)-8
b(E)g(C)g(B)208 959 y
SDict begin H.S end
 208 959 a 208 959 a
SDict begin 12 H.A end
 208 959 a 208
959 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.15) cvn H.B /DEST pdfmark end
 208 959 a 396 w Fb(L)n(S)n(R)53 b(r)6 b(6)25 b(,)70
b(r)6 b(6)26 b(,)59 b(#)l(1)508 b(;)78 b(s)15 b(h)g(i)g(f)g(t)79
b(r)14 b(e)g(s)g(u)g(l)g(t)69 b(t)9 b(o)71 b(r)12 b(i)g(g)g(h)g(t)71
b(\()20 b(d)11 b(i)g(v)g(i)g(d)g(e)67 b(b)s(y)62 b(2)9
b(\))208 1059 y
SDict begin H.S end
 208 1059 a 208 1059 a
SDict begin 12 H.A end
 208 1059 a 208
1059 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.16) cvn H.B /DEST pdfmark end
 208 1059 a 394 w Fb(S)l(T)l(R)51 b(r)6 b(6)25
b(,)77 b([)22 b(r)9 b(3)20 b(])27 b(,)60 b(#)l(4)408
b(;)75 b(s)12 b(t)g(o)g(r)g(e)76 b(r)14 b(e)g(s)g(u)g(l)g(t)71
b(i)10 b(n)52 b(V)-8 b(E)g(C)g(C)46 b(a)t(n)t(d)63 b(p)9
b(o)g(s)g(t)68 b(i)9 b(n)g(c)g(r)g(e)g(m)g(e)g(n)g(t)68
b(a)10 b(d)g(d)g(r)g(e)g(s)g(s)208 1159 y
SDict begin H.S end
 208 1159 a
208 1159 a
SDict begin 12 H.A end
 208 1159 a 208 1159 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.17) cvn H.B /DEST pdfmark end
 208 1159 a 395 w Fb(S)m(U)m(B)m(S)55
b(r)6 b(0)25 b(,)70 b(r)6 b(0)25 b(,)60 b(#)l(1)458 b(;)71
b(d)7 b(e)g(c)g(r)g(e)g(m)g(e)g(n)g(t)70 b(l)9 b(o)g(o)g(p)69
b(c)10 b(o)g(u)g(n)g(t)g(e)g(r)60 b(a)t(n)t(d)65 b(s)12
b(e)g(t)73 b(s)12 b(t)g(a)g(t)g(u)g(s)73 b(f)14 b(l)g(a)g(g)208
1258 y
SDict begin H.S end
 208 1258 a 208 1258 a
SDict begin 12 H.A end
 208 1258 a 208 1258 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.18) cvn H.B /DEST pdfmark end
 208
1258 a 391 w Fb(B)-7 b(N)g(E)35 b(L)-8 b(O)g(O)g(P)1200
b(;)74 b(c)10 b(o)g(n)g(t)g(i)g(n)g(u)g(e)73 b(u)14 b(n)g(t)g(s)g(i)g
(l)71 b(l)9 b(o)g(o)g(p)69 b(c)10 b(o)g(u)g(n)g(t)g(e)g(r)71
b(i)15 b(s)68 b(0)208 1358 y
SDict begin H.S end
 208 1358 a 208 1358 a
SDict begin 12 H.A end
 208
1358 a 208 1358 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.19) cvn H.B /DEST pdfmark end
 208 1358 a 385 w Fb(M)-13 b(O)g(V)39
b(p)t(c)22 b(,)78 b(l)15 b(r)1123 b(;)70 b(R)6 b(e)g(t)g(u)g(r)g(n)64
b(f)6 b(r)g(o)g(m)66 b(s)10 b(u)g(b)g(r)g(o)g(u)g(t)g(i)g(n)g(e)208
1457 y
SDict begin H.S end
 208 1457 a 208 1457 a
SDict begin 12 H.A end
 208 1457 a 208 1457 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.20) cvn H.B /DEST pdfmark end
 208
1457 a 208 1557 a
SDict begin H.S end
 208 1557 a 208 1557 a
SDict begin 12 H.A end
 208 1557 a 208
1557 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.21) cvn H.B /DEST pdfmark end
 208 1557 a -9 w Fb(A)-9 b(R)g(E)g(A)52 b(v)9 b(e)g(c)g(t)g(o)g
(r)33 b(,)55 b(D)-8 b(A)g(T)g(A)n(,)54 b(R)-9 b(E)g(A)g(D)g(W)g(R)g(I)g
(T)g(E)208 1657 y
SDict begin H.S end
 208 1657 a 208 1657 a
SDict begin 12 H.A end
 208 1657 a 208
1657 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.22) cvn H.B /DEST pdfmark end
 208 1657 a -8 w Fb(V)h(E)g(C)g(A)180 b(D)-9 b(C)g(D)51
b(1)22 b(,)11 b(2)22 b(,)11 b(3)21 b(,)11 b(4)22 b(,)11
b(5)22 b(,)11 b(6)21 b(,)11 b(7)22 b(,)11 b(8)74 b(;)67
b(8)62 b(e)8 b(l)g(e)g(m)g(e)g(n)g(t)72 b(v)11 b(e)g(c)g(t)g(o)g(r)208
1756 y
SDict begin H.S end
 208 1756 a 208 1756 a
SDict begin 12 H.A end
 208 1756 a 208 1756 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.23) cvn H.B /DEST pdfmark end
 208
1756 a -8 w Fb(V)-8 b(E)g(C)g(B)183 b(D)-9 b(C)g(D)51
b(1)22 b(,)11 b(2)22 b(,)11 b(3)21 b(,)11 b(4)22 b(,)11
b(5)22 b(,)11 b(6)21 b(,)11 b(7)22 b(,)11 b(8)74 b(;)67
b(8)62 b(e)8 b(l)g(e)g(m)g(e)g(n)g(t)72 b(v)11 b(e)g(c)g(t)g(o)g(r)208
1856 y
SDict begin H.S end
 208 1856 a 208 1856 a
SDict begin 12 H.A end
 208 1856 a 208 1856 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.24) cvn H.B /DEST pdfmark end
 208
1856 a -8 w Fb(V)-8 b(E)g(C)g(C)182 b(D)-9 b(C)g(D)51
b(0)22 b(,)11 b(0)22 b(,)11 b(0)21 b(,)11 b(0)22 b(,)11
b(0)22 b(,)11 b(0)21 b(,)11 b(0)22 b(,)11 b(0)74 b(;)67
b(8)62 b(e)8 b(l)g(e)g(m)g(e)g(n)g(t)72 b(v)11 b(e)g(c)g(t)g(o)g(r)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -46 2072
a(\(3)p Fa(:)p Fb(61\))p 0 TeXcolorgray 41 w(The)28 b(register)e(r15)h
(could)h(not)g(b)r(e)g(used)g(in)h(conjunction)f(with)g(most)g(data)g
(pro)r(cessing)e(instructions)i(b)r(ecause)g(the)208
2171 y(program)g(coun)n(ter)i(has)h(certain)f(v)-5 b(alues)31
b(that)g(w)n(ould)f(b)r(e)i(v)-5 b(alid.)46 b(Instructions)31
b(are)f(four)g(b)n(ytes)h(long,)g(so)f(r15)f(can)208
2271 y(only)24 b(b)r(e)h(c)n(hanged)f(in)h(incremen)n(ts)f(of)h(4.)35
b(Also,)25 b(the)g(PC)g(has)f(to)g(p)r(oin)n(t)h(to)g(an)f(actual)g
(instruction)h(in)g(the)g(program.)p 0 TeXcolorgray 1929
5529 a(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
